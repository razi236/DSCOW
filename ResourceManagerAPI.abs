// Resource API of Rpl
module ResourceManager;
import * from Resource;
export *;


data Availability = Free | Busy;

interface ResourceManager {
    List<Int> add1(List<Set<Quality>> newResources);
    List<Int> hold1(List<Set<Quality>> wantedResources);
    Unit release1(List<Int> ids);
}

class ResourceManager implements ResourceManager {
    Map<Int, Pair<Availability, Set<Quality>>> resources = map[];
    Int resource_counter = 0;

    List<Int> add1(List<Set<Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        println(toString(resources));
        return result;
    }

    List<Int> hold1(List<Set<Quality>> wantedResources) {
        List<Int> result = list[];
        Map<Int, Pair<Availability, Set<Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && isSubset(q, snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
                println(`hold retrying:
Resources = $this.resources$
We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                this.resources = lr;
            }
        }
        return result;
    }

    Unit release1(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Set<Quality>> entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
    }
}
interface FutTest
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class FutTest implements FutTest
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
           foreach(f in fut)
           {
               await f?;
           }
           resolved = True;
           println("Future Resolved:)");
    }
    Bool checkFut()
    {
        return resolved;
    }
}
