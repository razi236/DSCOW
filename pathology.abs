module Pathology;
import * from ABS.ResourceManager;
interface Reception
{
    Unit registerCase(Int priority, String sampleType);
    Unit setSpecimenList(Triple<Int, Int, String> x);
    List<Triple<Int, Int, String>> getSpecimenList();
}
class Reception implements Reception
{
    List<Triple<Int, Int, String>> specimenList = list[];
    Int caseNum = 1;
    Unit registerCase(Int priority, String sampleType)
    {
        Bool flag = False;
        Triple<Int, Int, String> newSpecimen = Triple(caseNum,priority,sampleType);
        if(isEmpty(specimenList)){
            specimenList = appendright(specimenList,newSpecimen);
        }
        else{
            Int i = 0;
            while (i < length(specimenList) && flag == False){
                Triple<Int, Int, String> y = nth(specimenList,i);
                if(sndT(y)<priority){
                    List<Triple<Int, Int, String>> tempList = list[Triple(caseNum,priority,sampleType)];
                    specimenList = concatenate(tempList,specimenList);
                    flag = True;
                }
                if(sndT(y)>=priority){
                    specimenList = appendright(specimenList,newSpecimen);
                    flag = True;
                }
            }
        }
        caseNum = caseNum + 1;
        print(this) after dl 1;
    }
    Unit print()
    {
        foreach(y in specimenList){
            println(`($fstT(y)$,$sndT(y)$,$trdT(y)$)`);
        }
        println("*******************");
    }
    Unit setSpecimenList(Triple<Int, Int, String> x)
    {
        specimenList = appendright(specimenList,x);
    }
    List<Triple<Int, Int, String>> getSpecimenList()
    {
        return specimenList;
    }
}
interface Grossing
{
    List<Triple<Int, Int, String>> gross(Triple<Int, Int, String> x, ResourceManager rm);
}
class Grossing implements Grossing
{
    List<Triple<Int, Int, String>> gross(Triple<Int, Int, String> x, ResourceManager rm)
    {
        // Create a list of blocks associated to a single case, with same case ID and priority.
        List<Triple<Int, Int, String>> blockList = list[x]; // tempory assign x
        List<Int> rid = list[];
        rid = holdRes(rm,list[set[BioTechnician, Efficiency(2)]]) after dl 1;
        // To Do
        releaseRes(rm,rid) after dl 1;
        //println(toString(blockList));
        return blockList;
    }
}
interface Processing
{
    List<Triple<Int, Int, String>> process();
}
class Processing implements Processing
{
    List<Triple<Int, Int, String>> process(List<Triple<Int, Int, String>> x)
    {
        // Processing
        consTime(10);
        return temp;
    }
}

{
    ResourceManager r = new ResourceManager();
    Reception reception = new Reception();
    Grossing grossing = new Grossing();
    List<Triple<Int, Int, String>> specimenList = list[];
    List<Int> rid = list[];
    Fut<List<Int>> f_rid;
    Fut<List<Triple<Int, Int, String>>> f;
    registerCase(reception,3,"Test-1") after dl 1;
    registerCase(reception,2,"Test-2") after dl 1;
    registerCase(reception,2,"Test-1") after dl 1;
    registerCase(reception,1,"Test-3") after dl 1;
    registerCase(reception,1,"Test-2") after dl 1;
    f_rid = !addRes(r,list[set[BioTechnician, Efficiency(2)],set[BioTechnician, Efficiency(5)],set[BioTechnician, Efficiency(3)],set[ProcessingMachine, Efficiency(10)],set[EmbeddingMachine, Efficiency(5)]]) after dl 1;
    await f_rid?;
    Fut<List<Triple<Int, Int, String>>> f_specimenList;
    f_specimenList = !getSpecimenList(reception) after dl 5;
    specimenList = f_specimenList.get;
    List<Triple<Int, Int, String>> processingTray = list[];
    Int i = 0;
    while(! isEmpty(specimenList))
    {
        Triple<Int, Int, String> specimen = head(specimenList);
        specimenList = tail(specimenList);
        List<Triple<Int, Int, String>> blockList = list[];
        f = !gross(grossing,specimen,r) after dl 10;
        await f?;
        blockList = f.get;
        foreach(block in blockList)
        {
            processingTray = appendright(processingTray,block);
        }
     }
     println(toString(processingTray));

}
