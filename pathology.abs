module Pathology;
import * from ABS.ResourceManager;
interface Reception
{
    Unit registerCase(Int priority, String sampleType);
    Unit setSpecimenList(Triple<Int, Int, String> x);
    List<Triple<Int, Int, String>> getSpecimenList();
}
class Reception implements Reception
{
    List<Triple<Int, Int, String>> specimenList = list[];
    Int caseNum = 1;
    Unit registerCase(Int priority, String sampleType)
    {
        Bool flag = False;
        Triple<Int, Int, String> newSpecimen = Triple(caseNum,priority,sampleType);
        foreach(y in specimenList){
            if(sndT(y)<=priority){
                flag = True;
            }
            if(sndT(y)>priority){
                specimenList = appendright(specimenList,newSpecimen);
                flag = True;
            }
        }
        if(flag == False){
            List<Triple<Int, Int, String>> tempList = list[Triple(caseNum,priority,sampleType)];
            specimenList = concatenate(tempList,specimenList);
        }
        caseNum = caseNum + 1;
        this.print();
    }
    Unit print()
    {
        foreach(y in specimenList){
            println(`($fstT(y)$,$sndT(y)$,$trdT(y)$)`);
        }
        println("*******************");
    }
    Unit setSpecimenList(Triple<Int, Int, String> x)
    {
        specimenList = appendright(specimenList,x);
    }
    List<Triple<Int, Int, String>> getSpecimenList()
    {
        List<Triple<Int, Int, String>> temp = list[];
        return temp;
    }
}
interface Grossing
{
    List<Triple<Int, Int, String>> gross(Triple<Int, Int, String> x, ResourceManager rm);
}
class Grossing implements Grossing
{
    List<Triple<Int, Int, String>> gross(Triple<Int, Int, String> x, ResourceManager rm)
    {
        // Create a list of blocks associated to a single case, with same case ID and priority.
        List<Triple<Int, Int, String>> blockList = list[x]; // tempory assign x
        List<Int> rid = list[];
        rid = holdRes(rm,list[set[BioTechnician, Efficiency(2)],set[ProcessingMachine, Efficiency(10)]]) after dl 1;
        // To Do
        releaseRes(rm,rid) after dl 1;
        return blockList;
    }
}
interface Processing
{
    List<Triple<Int, Int, String>> process();
}
class Processing implements Processing
{
    List<Triple<Int, Int, String>> process()
    {
        List<Triple<Int, Int, String>> temp = list[];
        // To Do
        return temp;
    }
}

{
    ResourceManager r = new ResourceManager();
    Reception reception = new Reception();
    Grossing grossing = new Grossing();
    Triple<Int, Int, String> sp = Triple(1,1,"Ali");
    List<Triple<Int, Int, String>> caseList = list[];
    List<Triple<Int, Int, String>> blockList = list[];
    List<Int> rid = list[];
    Fut<List<Int>> fid;
    List<Triple<Int, Int, String>> processList = list[];
    Fut<List<Triple<Int, Int, String>>> f;
    registerCase(reception,3,"Skin Test") after dl 1;
    registerCase(reception,1,"Blood Test") after dl 1;
    registerCase(reception,1,"Blood Test 1") after dl 1;
    registerCase(reception,2,"Blood Test") after dl 1;
    //caseList = getSpecimenList(reception) after dl 5;
    fid = !addRes(r,list[set[BioTechnician, Efficiency(2)],set[BioTechnician, Efficiency(5)],set[BioTechnician, Efficiency(3)],set[ProcessingMachine, Efficiency(10)],set[EmbeddingMachine, Efficiency(5)]]) after dl 1;
    await fid?;
    f = !gross(grossing,sp,r) after dl 10;
    await f?;
    blockList = f.get;
}
