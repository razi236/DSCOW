module Pathology_Workflow;

// Priority
// CITO => 1
// PakkeforlÃ¸p => 2
// Regular => 3

data Case = Case(Int case_ID, String case_Type, Int priority, String patho_team, Int no_of_containers);

interface Pathology
{
    List<Case> register_case(Case c); // Register cases as a priority queue
    List<Case> priority_queue(List<Case> c_list, Case c);
}

class Pathology implements Pathology
{
    List<Case> case_list = list[];
    List<Case> register_case(Case c)
    {
        if(isEmpty(case_list))
        {
            case_list = appendright (case_list, c);
        }
        else
        {

        }
        return case_list;
    }
    /*
    List<Case> priority_queue(List<Case> c_list, Case c)
    {
        if(isEmpty(c_list))
        {
            c_list = appendright (c_list, c);
        }
        else
        {
            if(priority(head(c_list))<priority(c))
            {
                List<Case> l = list[head(c_list)];
                List<Case> l1 = priority_queue (rm, tail(c_list), c);
                c_list = concatenate(l,l1);
            }
        }
        return c_list;
    }
    */
}

{
    Case c = Case(123,"Blood Sample",1,"Gyno",2);
    Case c1 = Case(123,"Blood Sample",1,"Gyno",2);
    Case c2 = Case(123,"Blood Sample",2,"Gyno",2);
    Pathology p = new Pathology();
    List<Case> clist = list[];
    Fut<List<Case>> f;
    f = !register_case(p,c) after dl 5;
    clist = f.get;
    Fut<List<Case>> f1;
    f1 = !register_case(p,c1) after dl 5;
    clist = f1.get;
    Fut<List<Case>> f2;
    f2 = !register_case(p,c) after dl 5;
    clist = f2.get;
    println(toString(clist));
}
