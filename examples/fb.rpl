module FB;
export Quality;
export *;
data RC = RC(Int rc);
data Quality = ResEfficiency(Int) | Int | ResCost(Int cst) | ResCapacity(Int) | Ferry | Doctor | SmokeMask | PoliceMan | Clerk | EODTech | FireFighter | FireExt | FirstAidBox;
interface ResourceCost {
    Int updateCost(Int c);
    Int printCost();
}
class ResourceCost implements ResourceCost {
    Int cst = 0;
    Int updateCost(Int c)
    {
        cst = cst + c;
        return 0;
    }
    Int printCost()
    {
        println(`%$cst$`);
        return 0;
    }
}
interface FB {
  Int start(List<Int> effPercentage,ResourceCost c);
  Int rushToSite(List<Set<Quality>> res,ResourceCost c);
  Int fightFire(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int mitigate(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int recoverSite(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int reportFireRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);}

class FB implements FB {
  List<Pair<Int,Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int fightFireCost = 2500;
  Int mitigateCost = 2500;
  Int recoverSiteCost = 2500;
  Int reportFireRescueCost = 100;
  Int start(List<Int> effPercentage,ResourceCost c){
    Int x = 0;FB fb1 = new FB();Fut<Int> f1;
    x = rushToSite(this,list[set[ResEfficiency(30),Ferry]],c) after dl 50;
    x = fightFire(this,list[set[ResEfficiency(25),FireFighter],set[ResEfficiency(25),FireFighter]],50,nth(effPercentage,3),c) after dl 70;
    f1 = !mitigate(fb1,list[set[ResEfficiency(25),FireFighter],set[ResEfficiency(25),FireFighter]],50,nth(effPercentage,3),c) after dl 70;
    x = recoverSite(this,list[set[ResEfficiency(25),FireFighter],set[ResEfficiency(25),FireFighter]],50,nth(effPercentage,3),c) after dl 50;
    await f1?;
    x = reportFireRescue(this,list[set[ResEfficiency(10),Clerk]],10,nth(effPercentage,1),c) after dl 50;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*rushToSiteCost)) after dl 10;
    await fc?;
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int fightFire(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate((fightFireCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int mitigate(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((mitigateCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int recoverSite(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((recoverSiteCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int reportFireRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((reportFireRescueCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
}

{
  FB fb = new FB();
  ResourceCost c = new ResourceCost();
  Fut<Int> f;
  f = !start(fb,list[100,100,100,100,100], c) after dl 400;
  await f?;
}
