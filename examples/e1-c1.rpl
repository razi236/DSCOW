module RPL;
export Quality;
export *;
data RC = RC(Int rc);
data Quality = ResEfficiency(Int) | Int | ResCost(Int cst) | ResCapacity(Int) | Ferry | Doctor | SmokeMask | PoliceMan | Clerk | EODTech | FireFighter | FireExt | FirstAidBox;
interface ResourceCost {
    Int updateCost(Int c);
    Int printCost();
}
class ResourceCost implements ResourceCost {
    Int cst = 0;
    Int updateCost(Int c)
    {
        cst = cst + c;
        return 0;
    }
    Int printCost()
    {
        println(`Financial cost = $cst$`);
        return 0;
    }
}
interface Police {
  Int alarm(ECC ecc, EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c);
  Int repEmgInfo(ECC ecc, EOD eod, FB fb, Hospital h,List<Set<Quality>> res,Int totalEfficiency, List<Int> effPercentage, ResourceCost c);
  Int rushToSite(List<Set<Quality>> res, ResourceCost c);
  Int dealSituation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int evacuation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int rescue(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage, ResourceCost c);}

class Police implements Police {
  List<Pair<Int,Int>> rid = Nil;
  Int repEmgInfoCost = 100;
  Int rushToSiteCost = 30;
  Int dealSituationCost = 2500;
  Int evacuationCost = 2500;
  Int rescueCost = 2500;
  Int alarm(ECC ecc, EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c)
  {
    Int x = 0;
    x = repEmgInfo(this,ecc, eod, fb, h, list[set[ResEfficiency(10),Clerk]], 10, effPercentage,c) after dl 400;
    return 0;
  }
  Int repEmgInfo(ECC ecc, EOD eod, FB fb, Hospital h,List<Set<Quality>> res,Int totalEfficiency, List<Int> effPercentage, ResourceCost c)
  {
    Police p1 = new Police();
    Police p2 = new Police();
    Fut<Int> f1;
    Fut<Int> f2;
    Fut<Int> f3;
    Fut<Int> f4;
    Fut<Int> fc;
    Int x = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    Int ef = nth(effPercentage,1);
    Int t = truncate((repEmgInfoCost/totalEfficiency)*(100/ef));
    cost(t);
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    temp = fst(p);
    rel(temp);
    f1 = !estEmgCtr(ecc) after dl 20;
    x = rushToSite(this,list[set[ResEfficiency(30),Ferry]],c) after dl 50;
    f2 = !dealSituation(p1,list[set[ResEfficiency(25),PoliceMan],set[ResEfficiency(25),PoliceMan]],50,nth(effPercentage,0),c) after dl 80;
    f3 = !evacuation(p2,list[set[ResEfficiency(25),PoliceMan],set[ResEfficiency(25),PoliceMan]],50,nth(effPercentage,0),c) after dl 80;
    x = rescue(this,list[set[ResEfficiency(25),PoliceMan],set[ResEfficiency(25),PoliceMan]],50,nth(effPercentage,0),c) after dl 80;
    await f1? & f2? & f3?;
    f4 = !makeEmgPlan(ecc,eod,fb,h,effPercentage,c) after dl 250;
    await f4?;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res, ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    cost(rushToSiteCost);
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*rushToSiteCost)) after dl 10;
    await fc?;
    rel(temp);
    return 0;
  }
  Int dealSituation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate((dealSituationCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int evacuation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((evacuationCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int rescue(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((rescueCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
}

interface ECC
{
  Int estEmgCtr();
  Int makeEmgPlan(EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c);
  Int doMediaCoverage();
}

class ECC implements ECC
{
  List<Pair<Int,Int>> rid = Nil;
  Int estEmgCtrCost = 10;
  Int doMediaCoverageCost = 10;
  Int estEmgCtr(){
    cost(estEmgCtrCost);
    return 0;
  }
  Int makeEmgPlan(EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c){
    Int x = 0;Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;
    f1 = !start(eod,effPercentage,c) after dl 100;
    f2 = !start(fb,effPercentage,c) after dl 240;
    f3 = !start(h,effPercentage,c) after dl 180;
    await f1? & f2? & f3?;
    x = doMediaCoverage(this) after dl 20;
    return 0;
  }
  Int doMediaCoverage(){
    cost(doMediaCoverageCost);
    return 0;
  }
}

interface EOD
{
  Int start(List<Int> effPercentage,ResourceCost c);
  Int rushToSite(List<Set<Quality>> res,ResourceCost c);
  Int searchEOD(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage,ResourceCost c);
  Int reportEOD(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage,ResourceCost c);
}

class EOD implements EOD {
  List<Pair<Int,Int>> rid = Nil;
  Int rushToSiteCost = 30;
  Int searchEODCost = 250;
  Int reportEODCost = 100;
  Int start(List<Int> effPercentage,ResourceCost c){
    Int x = 0;
    x = rushToSite(this,list[set[ResEfficiency(30),Ferry]],c) after dl 50;
    x = searchEOD(this,list[set[ResEfficiency(25),EODTech]],25,nth(effPercentage,2),c) after dl 20;
    x = reportEOD(this,list[set[ResEfficiency(10),Clerk]],10,nth(effPercentage,1),c) after dl 20;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*rushToSiteCost)) after dl 10;
    await fc?;
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int searchEOD(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage,ResourceCost c){
    List<Int> temp = Nil;
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate((searchEODCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int reportEOD(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate((reportEODCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
}
interface FB {
  Int start(List<Int> effPercentage,ResourceCost c);
  Int rushToSite(List<Set<Quality>> res,ResourceCost c);
  Int fightFire(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int mitigate(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int recoverSite(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int reportFireRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);}

class FB implements FB {
  List<Pair<Int,Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int fightFireCost = 2500;
  Int mitigateCost = 2500;
  Int recoverSiteCost = 2500;
  Int reportFireRescueCost = 100;
  Int start(List<Int> effPercentage,ResourceCost c){
    Int x = 0;FB fb1 = new FB();Fut<Int> f1;
    x = rushToSite(this,list[set[ResEfficiency(30),Ferry]],c) after dl 50;
    x = fightFire(this,list[set[ResEfficiency(25),FireFighter],set[ResEfficiency(25),FireFighter]],50,nth(effPercentage,3),c) after dl 70;
    f1 = !mitigate(fb1,list[set[ResEfficiency(25),FireFighter],set[ResEfficiency(25),FireFighter]],50,nth(effPercentage,3),c) after dl 70;
    x = recoverSite(this,list[set[ResEfficiency(25),FireFighter],set[ResEfficiency(25),FireFighter]],50,nth(effPercentage,3),c) after dl 50;
    await f1?;
    x = reportFireRescue(this,list[set[ResEfficiency(10),Clerk]],10,nth(effPercentage,1),c) after dl 50;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*rushToSiteCost)) after dl 10;
    await fc?;
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int fightFire(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate((fightFireCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int mitigate(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((mitigateCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int recoverSite(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((recoverSiteCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int reportFireRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((reportFireRescueCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
}

interface Hospital {
  Int start(List<Int> effPercentage,ResourceCost c);
  Int rushToSite(List<Set<Quality>> res,ResourceCost c);
  Int shuntWounded(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int treatSliInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int treatSevInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);
  Int reportMedRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c);}

class Hospital implements Hospital {
  List<Pair<Int,Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int shuntWoundedCost = 900;
  Int treatSliInjCost = 900;
  Int treatSevInjCost = 2500;
  Int reportMedRescueCost = 100;
  Int start(List<Int> effPercentage,ResourceCost c){
    Int x = 0;
    Hospital h1 = new Hospital();
    Fut<Int> f1;
    x = rushToSite(this,list[set[ResEfficiency(30),Ferry]],c) after dl 50;
    x = shuntWounded(this,list[set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor]],30,nth(effPercentage,4),c) after dl 50;
    f1 = !treatSliInj(h1,list[set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor]],30,nth(effPercentage,4),c) after dl 50;
    x = treatSevInj(this,list[set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor],set[ResEfficiency(10),Doctor]],50,nth(effPercentage,4),c) after dl 70;
    await f1?;
    x = reportMedRescue(this,list[set[ResEfficiency(10),Clerk]],10,nth(effPercentage,1),c) after dl 20;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*rushToSiteCost)) after dl 10;
    await fc?;
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int shuntWounded(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((shuntWoundedCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int treatSliInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((treatSliInjCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int treatSevInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate((treatSevInjCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
  Int reportMedRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage,ResourceCost c){
    List<Int> temp = list(Nil);
    Pair<List<Int>,Int> p = hold(res);
    temp = fst(p);
    Int t = truncate((reportMedRescueCost/totalEfficiency)*(100/effPercentage));
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(temp);
    return 0;
  }
}
{
  Int count = 0;
  List<Fut<Int>> fl = Nil;
  ResourceCost c = new ResourceCost();
  while(count < 1) {
      Police p = new Police();
      Police p1 = new Police();
      Police p2 = new Police();
      ECC ecc = new ECC();
      EOD eod = new EOD();
      FB fb = new FB();
      Hospital h = new Hospital();
      Int counter = 1;
      Int max = conc;
      while (counter <= max) {
          Fut<Int> f;
          Int r1 = random(50)+50;
          Int r2 = random(50)+50;
          Int r3 = random(50)+50;
          Int r4 = random(50)+50;
          Int r5 = random(50)+50;
          // for efficiency configurstions C1 - C6 put hard coded value in the list for each resource type,
          // assuming each resource type has same efficiency level
          // list[PoliceMan,Clerk,EODTech,FireFighter,Doctor]
          // *****************************
          f = !alarm(p,ecc, eod, fb, h, list[100,100,100,100,100], c) after dl 400*max;
          // *****************************
          // for randomly selected efficiency configuration
          //f = !alarm(p,ecc, eod, fb, h, list[r1,r2,r3,r4,r5], c) after dl 400*max;
          fl = appendright(fl,f);
          counter = counter + 1;
      }
      count = count + 1;
  }

  while(!isEmpty(fl)){
    Fut<Int> f3 = head(fl);
    await f3?;
    fl = tail(fl);
  }

  Rat t = timeValue(now());
  Int t1 = truncate(t);
  println(`Execution time = $t1$`);
  Fut<Int> fc;
  fc = !printCost(c) after dl 5;
  await fc?;
}
