module EOD;
export Quality;
export *;
data RC = RC(Int rc);
data Quality = ResEfficiency(Int) | Int | ResCost(Int cst) | ResCapacity(Int) | Ferry | Doctor | SmokeMask | PoliceMan | Clerk | EODTech | FireFighter | FireExt | FirstAidBox;
data Resource = Res(Quality,Quality);
interface ResourceCost {
    Int updateCost(Int c);
    Int printCost();
}
class ResourceCost implements ResourceCost {
    Int cst = 0;
    Int updateCost(Int c)
    {
        cst = cst + c;
        return 0;
    }
    Int printCost()
    {
        println(`%$cst$`);
        return 0;
    }
}
interface EOD
{
  Int start(List<Int> effPercentage,ResourceCost c);
  Int rushToSite(ResourceCost c);
  Int searchEOD(Int totalEfficiency, Int effPercentage,ResourceCost c);
  Int reportEOD(Int totalEfficiency, Int effPercentage,ResourceCost c);
}
class EOD implements EOD {
  List<Pair<Int,Int>> rid = Nil;
  Int rushToSiteCost = 30;
  Int searchEODCost = 250;
  Int reportEODCost = 100;
  Int start(List<Int> effPercentage,ResourceCost c){
    Int x = 0;
    x = rushToSite(this,c) after dl 50;
    x = searchEOD(this,25,nth(effPercentage,2),c) after dl 20;
    x = reportEOD(this,10,nth(effPercentage,1),c) after dl 20;
    return 0;
  }
  Int rushToSite(ResourceCost c){
    Pair<List<Int>,Int> p = hold(list[set[ResEfficiency(30),Ferry]]);
    Fut<Int> fc;
    fc = !updateCost(c,(snd(p)*rushToSiteCost)) after dl 10;
    await fc?;
    cost(rushToSiteCost);
    rel(p);
    return 0;
  }
  Int searchEOD(Int totalEfficiency, Int effPercentage,ResourceCost c){
    Pair<List<Int>,Int> p = hold(list[set[ResEfficiency(25),EODTech],set[ResEfficiency(25),EODTech]]);
    Fut<Int> fc;
    Int t = truncate((searchEODCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(p);
    return 0;
  }
  Int reportEOD(Int totalEfficiency,Int effPercentage,ResourceCost c){
    Pair<List<Int>,Int> p = hold(list[set[ResEfficiency(10),Clerk],set[ResEfficiency(20),EODTech]]);
    Fut<Int> fc;
    Int t = truncate((reportEODCost/totalEfficiency)*(100/effPercentage));
    fc = !updateCost(c,(snd(p)*t)) after dl 10;
    await fc?;
    cost(t);
    rel(p);
    return 0;
  }
}

{
  EOD eod = new EOD();
  ResourceCost c = new ResourceCost();
  Fut<Int> f;
  f = !start(eod,list[100,100,100,100,100], c) after dl 400;
  await f?;
}

// Here in this example I have made a new data type "Resource", a tuple of resource qualities, to check if it works well with Resource Peak Analysis, if worked, I will update the Resource Manager Library, otherwise will discard this change :)
