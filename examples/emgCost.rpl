module RPL;
export Quality;
export *;
data Quality = ResEfficiency(Int) | ResCost(Int) | ResCapacity(Int) | Ferry | Doctor | SmokeMask | PoliceMan | Clerk | EODTech | FireFighter | FireExt | FirstAidBox;
interface Police {
  Int alarm(ECC ecc, EOD eod, FB fb, Hospital h, Int effPercentage);
  Int repEmgInfo(ECC ecc, EOD eod, FB fb, Hospital h,List<Set<Quality>> res,Int totalEfficiency, Int effPercentage);
  Int rushToSite(List<Set<Quality>> res);
  Int dealSituation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage);
  Int evacuation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage);
  Int rescue(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage);}

class Police implements Police {
  List<Pair<Int,Int>> rid = Nil;
  Int repEmgInfoCost = 100;
  Int rushToSiteCost = 300;
  Int dealSituationCost = 2500;
  Int evacuationCost = 2500;
  Int rescueCost = 2500;
  Int alarm(ECC ecc, EOD eod, FB fb, Hospital h, Int effPercentage)
  {
    Int x = 0;
    x = repEmgInfo(this,ecc, eod, fb, h, list[set[Clerk,ResEfficiency(10)]], 10, effPercentage) after dl 400;
    return 0;
  }
  Int repEmgInfo(ECC ecc, EOD eod, FB fb, Hospital h,List<Set<Quality>> res,Int totalEfficiency, Int effPercentage)
  {
    Police p1 = new Police();
    Police p2 = new Police();
    Fut<Int> f1;
    Fut<Int> f2;
    Fut<Int> f3;
    Fut<Int> f4;
    Int x = 0;
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((repEmgInfoCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    f1 = !estEmgCtr(ecc) after dl 20;
    x = rushToSite(this,list[set[Ferry,ResEfficiency(30)]]) after dl 50;
    f2 = !dealSituation(p1,list[set[PoliceMan,ResEfficiency(25)],set[PoliceMan,ResEfficiency(25)]],50,effPercentage) after dl 80;
    f3 = !evacuation(p2,list[set[PoliceMan,ResEfficiency(25)],set[PoliceMan,ResEfficiency(25)]],50,effPercentage) after dl 80;
    x = rescue(this,list[set[PoliceMan,ResEfficiency(25)],set[PoliceMan,ResEfficiency(25)]],50,effPercentage) after dl 80;
    f4 = !makeEmgPlan(ecc,eod,fb,h,effPercentage) after f1&f2&f3 dl 250;
    await f4?;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int dealSituation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((dealSituationCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int evacuation(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((evacuationCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int rescue(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((rescueCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
}

interface ECC
{
  Int estEmgCtr();
  Int makeEmgPlan(EOD eod, FB fb, Hospital h, Int effPercentage);
  Int doMediaCoverage();
}

class ECC implements ECC
{
  List<Pair<Int,Int>> rid = Nil;
  Int estEmgCtrCost = 10;
  Int doMediaCoverageCost = 10;
  Int estEmgCtr(){
    cost(estEmgCtrCost);
    return 0;
  }
  Int makeEmgPlan(EOD eod, FB fb, Hospital h, Int effPercentage){
    Int x = 0;Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;
    f1 = !start(eod,effPercentage) after dl 100;
    f2 = !start(fb,effPercentage) after dl 240;
    f3 = !start(h,effPercentage) after dl 180;
    x = doMediaCoverage(this) after f1&f2&f3 dl 20;
    return 0;
  }
  Int doMediaCoverage(){
    cost(doMediaCoverageCost);
    return 0;
  }
}

interface EOD
{
  Int start(Int effPercentage);
  Int rushToSite(List<Set<Quality>> res);
  Int searchEOD(Int totalEfficiency);
  Int reportEOD(List<Set<Quality>> res,Int totalEfficiency, Int effPercentage);
}

class EOD implements EOD {
  List<Pair<Int,Int>> rid = Nil;
  Int rushToSiteCost = 30;
  Int searchEODCost = 10;
  Int reportEODCost = 100;
  Int start(Int effPercentage){
    Int x = 0;
    x = rushToSite(this,list[set[Ferry,ResEfficiency(30)]]) after dl 50;
    x = searchEOD(this,10) after dl 20;
    x = reportEOD(this,list[set[Clerk,ResEfficiency(10)]],10,effPercentage) after dl 20;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int searchEOD(Int totalEfficiency){
    List<Pair<Int,Int>> temp = Nil;
    cost(totalEfficiency);
    return 0;
  }
  Int reportEOD(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((reportEODCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
}
interface FB {
  Int start(Int effPercentage);
  Int rushToSite(List<Set<Quality>> res);
  Int fightFire(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);
  Int mitigate(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);
  Int recoverSite(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);
  Int reportFireRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);}

class FB implements FB {
  List<Pair<Int,Int>> rid = list(Nil);
  Int rushToSiteCost = 10;
  Int fightFireCost = 2500;
  Int mitigateCost = 2500;
  Int recoverSiteCost = 2500;
  Int reportFireRescueCost = 100;
  Int start(Int effPercentage){
    Int x = 0;FB fb1 = new FB();Fut<Int> f1;
    x = rushToSite(this,list[set[Ferry,ResEfficiency(30)]]) after dl 50;
    x = fightFire(this,list[set[FireFighter,ResEfficiency(25)],set[FireFighter,ResEfficiency(25)]],50,effPercentage) after dl 70;
    f1 = !mitigate(fb1,list[set[FireFighter,ResEfficiency(25)],set[FireFighter,ResEfficiency(25)]],50,effPercentage) after dl 70;
    x = recoverSite(this,list[set[FireFighter,ResEfficiency(25)],set[FireFighter,ResEfficiency(25)]],50,effPercentage) after dl 50;
    x = reportFireRescue(this,list[set[Clerk,ResEfficiency(10)]],10,effPercentage) after f1 dl 50;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int fightFire(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((fightFireCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int mitigate(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((mitigateCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int recoverSite(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((recoverSiteCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int reportFireRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((reportFireRescueCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
}

interface Hospital {
  Int start(Int effPercentage);
  Int rushToSite(List<Set<Quality>> res);
  Int shuntWounded(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);
  Int treatSliInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);
  Int treatSevInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);
  Int reportMedRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage);}

class Hospital implements Hospital {
  List<Pair<Int,Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int shuntWoundedCost = 900;
  Int treatSliInjCost = 900;
  Int treatSevInjCost = 2500;
  Int reportMedRescueCost = 100;
  Int start(Int effPercentage){
    Int x = 0;
    Hospital h1 = new Hospital();
    Fut<Int> f1;
    x = rushToSite(this,list[set[Ferry,ResEfficiency(30)]]) after dl 50;
    x = shuntWounded(this,list[set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)]],30,effPercentage) after dl 50;
    f1 = !treatSliInj(h1,list[set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)]],30,effPercentage) after dl 50;
    x = treatSevInj(this,list[set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)],set[Doctor,ResEfficiency(10)]],50,effPercentage) after dl 70;
    x = reportMedRescue(this,list[set[Clerk,ResEfficiency(10)]],10,effPercentage) after f1 dl 20;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost(rushToSiteCost);
    rel(temp);
    return 0;
  }
  Int shuntWounded(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((shuntWoundedCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int treatSliInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((treatSliInjCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int treatSevInj(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((treatSevInjCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
  Int reportMedRescue(List<Set<Quality>> res,Int totalEfficiency,Int effPercentage){
    List<Int> temp = list(Nil);
    temp = hold(res);
    cost((reportMedRescueCost/totalEfficiency)*(100/effPercentage));
    rel(temp);
    return 0;
  }
}
{
  Police p = new Police();
  ECC ecc = new ECC();
  EOD eod = new EOD();
  FB fb = new FB();
  Hospital h = new Hospital();
  Fut<Int> f;
  f = !alarm(p,ecc, eod, fb, h, 100
  ) after dl 400;
  await f?;
  Rat t = timeValue(now());
  Int t1 = truncate(t);
  println(`%$t1$`);
}

// [Done] Make it generic. (specially cost and hold statement arguments should be passed as a parameter on method invocation.)
// [Done] Replace cost value (e.g, 2500) with a class field, so it can be changed easily.
// Cost in terms of budget (try to implement it).
// [r -> (rid, Q)] -> (eff,specialization,cost,capacity).
// also try to implement with capacity.
