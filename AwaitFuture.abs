module ABS;

interface Payment
{
    Unit payInCash(Payment p);
    Unit payByCard(Payment p);
}
class Payment implements Payment
{
    Unit payInCash(Payment p)
    {
        duration(5,10);
        println("Paid in Cash:");
        try {
            Duration d = deadline(); // Check remaining time (deadline).
            Rat r = durationValue(d); // Convert duration into rational value.
            assert r > 0;
        } catch {
            AssertionFailException => println(`Deadline Missed by method payInCash executing on object $p$`);
        }
    }
    Unit payByCard(Payment p)
    {
        duration(15,20);
        println("Paid by Card:");
        try {
            Duration d = deadline(); // Check remaining time (deadline).
            Rat r = durationValue(d); // Convert duration into rational value.
            assert r > 0;
        } catch {
            AssertionFailException => println(`Deadline Missed by method payDuration executing on object $p$`);
        }
    }
}
interface AwaitFut
{
    Unit awaitFut(List<Fut<Unit>> fut);
    Bool checkFut(); // Return True if all the futures are resolved.
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Unit>> fut)
    {
           foreach(f in fut)
           {
               await f?;
           }
           resolved = True; // All the futures are resolved.
           println("Future Resolved:)");
    }
    Bool checkFut()
    {
        return resolved;
    }
}

{
  Fut<Unit> f;
  Fut<Unit> f1;
  Bool c = False;
  Bool d = False;
  List<Unit> fids = list(Nil);
  Payment o = new Payment();
  Payment o1 = new Payment();
  AwaitFut a = new AwaitFut();
  AwaitFut b = new AwaitFut();
  [Deadline: Duration(3)]  f = o!payInCash(o);
  [Deadline: Duration(3)]  f1 = o1!payByCard(o1);
  a!awaitFut(list[f]);
  b!awaitFut(list[f1]);
  while(!(c || d))
  {
    d = await a!checkFut();
    c = await b!checkFut();
    println(`c = $c$ and d = $d$`);
    await duration(2);
  }
  println("Thank You for the payment :)");
  d = await a!checkFut();
  c = await b!checkFut();
  println(`c = $c$ and d = $d$`);
}
