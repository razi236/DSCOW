module ABS.ResourceManager;
import * from ABS.StdLib;
export *;
data Quality = Efficiency(Int) | Pathologist | BioTechnician | ProcessingMachine | EmbeddingMachine | StainingMachine | Receptionist | VanDriver | DeliveryVan | HeadWaiter | RunnerWaiter | Cook | CookAssistant;

// Resource Management
// Translation fetches resources from the database and store them in a resource map in the ABS program.
// The following code helps to add, acquire and release the resources.

data Availability = Free | Busy;

interface ResourceManager {
    List<Int> addRes(List<Set<Quality>> newResources);
    List<Int> holdRes(List<Set<Quality>> wantedResources);
    Unit releaseRes(List<Int> ids);
    Unit print();
}

class ResourceManager implements ResourceManager {
    Map<Int, Pair<Availability, Set<Quality>>> resources = map[];
    Int resource_counter = 0;

    Unit print() {
        println(toString(resources));
    }
    List<Int> addRes(List<Set<Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        //println(toString(resources));
        return result;
    }

    List<Int> holdRes(List<Set<Quality>> wantedResources) {
        List<Int> result = list[];
        Map<Int, Pair<Availability, Set<Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && isSubset(q, snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
                println(`hold retrying: Resources = $this.resources$ We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired all the requested resources :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
        }

        //println(toString(this.resources));
        return result;
    }
    Unit releaseRes(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Set<Quality>> entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
        /*
        println("***********************************************");
        println("We have released all the acquired resources :)");
        println("***********************************************");
        */

        //println(toString(this.resources));
    }
}

// ABS does not support disjunction between future return tests (await f1? || await f2?)
// The following code is a syntactic sugar for the disjunction between the return tests.
// The code is not generic, supports only futures of integer type (Fut<Int>).

interface AwaitFut
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
        try {
            if(!isEmpty(fut)){
               foreach(f in fut)
               {
                   await f?;
               }
               resolved = True;
               println("Future Resolved:)");
            }
        } catch {
            NullPointerException  => println(`Future is not initialized`);
        }
    }
    Bool checkFut()
    {
        return resolved;
    }
}
module Rescue;
import * from ABS.ResourceManager;

import * from ABS.StdLib;

interface Police {
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h);
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h);
  Int rushToSite(ResourceManager rm);
  Int dealSituation(ResourceManager rm);
  Int evacuation(ResourceManager rm);
  Int rescue(ResourceManager rm);}

class Police implements Police {
  
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h){
    Int x = 0;[Deadline: Duration(55)]    x = this.repEmgInfo(rm,ecc, eod, fb, h);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "alarm" have missed the deadline.`);
    }
    return 0;
  }
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h){
    Police p1 = new Police();Police p2 = new Police();Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;Fut<Int> f4;Int x = 0;duration(5, 5);[Deadline: Duration(55)]    f1 = ecc!estEmgCtr(rm);[Deadline: Duration(25)]    x = this.rushToSite(rm);[Deadline: Duration(25)]    f2 = p1!dealSituation(rm);[Deadline: Duration(25)]    f3 = p2!evacuation(rm);[Deadline: Duration(25)]    x = this.rescue(rm);await f1? & f2? & f3?;[Deadline: Duration(55)]    f4 = ecc!makeEmgPlan(rm,eod, fb, h);await f4?;try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "repEmgInfo" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int dealSituation(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "dealSituation" have missed the deadline.`);
    }
    return 0;
  }
  Int evacuation(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "evacuation" have missed the deadline.`);
    }
    return 0;
  }
  Int rescue(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rescue" have missed the deadline.`);
    }
    return 0;
  }
  }

interface ECC {
  Int estEmgCtr(ResourceManager rm);
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h);
  Int doMediaCoverage(ResourceManager rm);}

class ECC implements ECC {
  
  Int estEmgCtr(ResourceManager rm){
    duration(50, 50);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "estEmgCtr" have missed the deadline.`);
    }
    return 0;
  }
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h){
    Int x = 0;Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;[Deadline: Duration(50)]    f1 = eod!start(rm);[Deadline: Duration(50)]    f2 = fb!start(rm);[Deadline: Duration(50)]    f3 = h!start(rm);await f1? & f2? & f3?;[Deadline: Duration(20)]    x = this.doMediaCoverage(rm);println("Plan Done");try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "makeEmgPlan" have missed the deadline.`);
    }
    return 0;
  }
  Int doMediaCoverage(ResourceManager rm){
    duration(15, 15);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "doMediaCoverage" have missed the deadline.`);
    }
    return 0;
  }
  }

interface EOD {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int searchEOD(ResourceManager rm);
  Int reportEOD(ResourceManager rm);}

class EOD implements EOD {
  
  Int start(ResourceManager rm){
    Int x = 0;[Deadline: Duration(25)]    x = this.rushToSite(rm);[Deadline: Duration(15)]    x = this.searchEOD(rm);[Deadline: Duration(10)]    x = this.reportEOD(rm);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int searchEOD(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "searchEOD" have missed the deadline.`);
    }
    return 0;
  }
  Int reportEOD(ResourceManager rm){
    duration(5, 5);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "reportEOD" have missed the deadline.`);
    }
    return 0;
  }
  }

interface FB {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int fightFire(ResourceManager rm);
  Int mitigate(ResourceManager rm);
  Int recoverSite(ResourceManager rm);
  Int reportFireRescue(ResourceManager rm);}

class FB implements FB {
  
  Int start(ResourceManager rm){
    Int x = 0;FB fb1 = new FB();Fut<Int> f1;[Deadline: Duration(25)]    x = this.rushToSite(rm);[Deadline: Duration(35)]    x = this.fightFire(rm);[Deadline: Duration(15)]    f1 = fb1!mitigate(rm);[Deadline: Duration(15)]    x = this.recoverSite(rm);await f1?;[Deadline: Duration(10)]    x = this.reportFireRescue(rm);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int fightFire(ResourceManager rm){
    duration(30, 30);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "fightFire" have missed the deadline.`);
    }
    return 0;
  }
  Int mitigate(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "mitigate" have missed the deadline.`);
    }
    return 0;
  }
  Int recoverSite(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "recoverSite" have missed the deadline.`);
    }
    return 0;
  }
  Int reportFireRescue(ResourceManager rm){
    duration(5, 5);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "reportFireRescue" have missed the deadline.`);
    }
    return 0;
  }
  }

interface Hospital {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int shuntWounded(ResourceManager rm);
  Int treatSliInj(ResourceManager rm);
  Int treatSevInj(ResourceManager rm);
  Int reportMedRescue(ResourceManager rm);}

class Hospital implements Hospital {
  
  Int start(ResourceManager rm){
    Int x = 0;Hospital h1 = new Hospital();Fut<Int> f1;[Deadline: Duration(25)]    x = this.rushToSite(rm);[Deadline: Duration(25)]    x = this.shuntWounded(rm);[Deadline: Duration(25)]    f1 = h1!treatSliInj(rm);[Deadline: Duration(25)]    x = this.treatSevInj(rm);await f1?;[Deadline: Duration(10)]    x = this.reportMedRescue(rm);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int shuntWounded(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "shuntWounded" have missed the deadline.`);
    }
    return 0;
  }
  Int treatSliInj(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "treatSliInj" have missed the deadline.`);
    }
    return 0;
  }
  Int treatSevInj(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "treatSevInj" have missed the deadline.`);
    }
    return 0;
  }
  Int reportMedRescue(ResourceManager rm){
    duration(5, 5);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "reportMedRescue" have missed the deadline.`);
    }
    return 0;
  }
  }


{
  ResourceManager rm = new ResourceManager();
  await rm!addRes(list[set[Pathologist, Efficiency(3)], set[BioTechnician, Efficiency(5)], set[BioTechnician, Efficiency(3)], set[BioTechnician, Efficiency(10)], set[VanDriver, Efficiency(5)], set[DeliveryVan, Efficiency(1500)], set[BioTechnician, Efficiency(2)], set[BioTechnician, Efficiency(2)], set[BioTechnician, Efficiency(2)], set[BioTechnician, Efficiency(2)], set[ProcessingMachine, Efficiency(10)], set[ProcessingMachine, Efficiency(10)], set[StainingMachine, Efficiency(5)], set[StainingMachine, Efficiency(5)], set[Pathologist, Efficiency(2)], set[HeadWaiter, Efficiency(2)], set[RunnerWaiter, Efficiency(1)], set[RunnerWaiter, Efficiency(1)], set[Cook, Efficiency(5)], set[CookAssistant, Efficiency(1)], set[CookAssistant, Efficiency(1)], set[CookAssistant, Efficiency(1)], set[Cook, Efficiency(3)]]);
  Police p = new Police();
  ECC ecc = new ECC();
  EOD eod = new EOD();
  FB fb = new FB();
  Hospital h = new Hospital();
  Fut<Int> f;
  [Deadline: Duration(150)]  f = p!alarm(rm,ecc, eod, fb, h);
  await f?;
  println("Cool");
  println(( ( "Time: " + toString(now()) ) + "" ));
}
