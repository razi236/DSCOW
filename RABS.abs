module Test;
import ResourceManager from ResMngr;


interface WareHouse
{
    Bool checkAvailability(Int o);
    Unit pack(Int o);
}
class WareHouse implements WareHouse{
    Bool checkAvailability(Int o)
    {
        // For simplicity
        return True;
    }
    Unit pack(Int o)
    {
        println(`Packing Order: $o$`);
        await duration(5); // Packing Time
    }
}
interface Supplier {
    Unit supply(Courier cr, ResourceManager r, Int o);
}
class Supplier implements Supplier{
    Unit supply(Courier cr, ResourceManager r, Int o)
    {
        Fut<Unit> f4;
        println(`Supplying Order: $o$`);
        await duration(5); // Packing Time
        f4 = cr!deliver(r,o);
        await f4?;
        f4.get;
        // can be directly mapped with AwaitExp ::= await AsyncCall
    }
}
interface Courier
{
    Unit deliver(ResourceManager r,Int o);
}
class Courier implements Courier{
    Unit deliver(ResourceManager r, Int o)
    {
        println(`Start Delivery for Order: $o$`);
        Fut<List<Int>> fids = r!hold(list[set[Driver, VanDriver, Efficiency(5)], set[Van, Efficiency(15)]]);
        await fids?;
        println(`Held Resources`);
        List<Int> l1 = fids.get;
        await duration(10); // Delivery Time
        Fut<Unit> fr = r!release(l1);
        println(`Released Resources`);
    }
}

interface Retailer
{
    Unit sale(Supplier sp, Courier cr,ResourceManager r, Int order);
}

class Retailer implements Retailer{
    // First argument is not the callee object (x).
    Unit sale(Supplier sp, Courier cr,ResourceManager r, Int order)
    {
        Fut<Unit> f1; Fut<Unit> f2; Fut<Unit> f3;
        Bool available = False;
        Int prod = 0;
        WareHouse w = new WareHouse();
        println(`In Supply workflow`);
        available = w.checkAvailability(order);
        if(available)
        {
            f1 = w!pack(order);
            await f1?;
            f1.get;
        }
        else
        {
            f2 = sp!supply(cr,r,order);
            await f2?;
            f2.get;
        }
        f3 = cr!deliver(r,order);
        await f3?;
        f3.get;
        println(`Successfully delivered Order: $order$ :)`);
    }
}
{
    cost(10);
    Retailer rt = new Retailer();
    Courier cr = new Courier();
    Supplier sp = new Supplier();
    ResourceManager r = new ResourceManager();
    //await r!add(list[set[Orthopedic, Efficiency(2)], set[Gynaecologist]]);
   // await r!add(list[set[Driver, VanDriver, Efficiency(5)], set[Van, Efficiency(15)]]);
    Fut<Unit> f1 = rt!sale(sp,cr,r,1);
    Fut<Unit> f2 = rt!sale(sp,cr,r,2);
    Fut<Unit> f3 = rt!sale(sp,cr,r,3);
    Fut<Unit> f4 = rt!sale(sp,cr,r,4);
    Fut<Unit> f5 = rt!sale(sp,cr,r,5);
    await f1?&f2?&f3?&f4?&f5?;
}


