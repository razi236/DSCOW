import java.io.PrintWriter;
import org.abs_models.backend.cost.*;
import java.util.stream.Collectors;
import com.google.common.collect.Streams;

aspect generate_sync_schema {

    /** Controls whether to include the standard library in generate_sync_schema
     */

    public boolean Model.generate_sync_schemaStdLib = false;

/*    public void List.generate_sync_schema(String m,PrintWriter o) {

        Map<String,Set<Set<PureExp>>> temp_map = new HashMap<String,Set<Set<PureExp>>>();
        Set<Set<PureExp>> temp_set = new HashSet<Set<PureExp>>();
        temp_set.add(syn_set);
        temp_map.put(m,temp_set);

        if (getNumChild() > 0) {
            temp_map = getChild(0).generate_sync_schema(temp_map,m,o);
            for (int i = 1; i < getNumChild(); i++) {
                temp_map = getChild(1).generate_sync_schema(temp_map,m,o);
            }
        }


    }
*/
    public void List.generate_sync_schema(String m,PrintWriter o) {
        /*
        if (getNumChild() > 0) {
            if(getChild(0) instanceof MethodImpl)
            {
                //String name = ((MethodImpl) getChild(0)).getMethodSig().getName();
                                o.println();
                o.println();
                o.print(" In List ");
                o.println();
                getChild(0).generate_sync_schema(m,o);
            }

            for (int i = 1; i < getNumChild(); i++) {
                if(getChild(i) instanceof MethodImpl)
                {
                    //String name = ((MethodImpl) getChild(i)).getMethodSig().getName();
                    getChild(i).generate_sync_schema(m,o);
                }

            }
        }
        */
        if (getNumChild() > 0) {
            o.println();
            o.print(" In List ");
            o.println();
            getChild(0).generate_sync_schema(m,o);
            for (int i = 1; i < getNumChild(); i++) {
                getChild(i).generate_sync_schema(m,o);
            }

        }
    }

    public void ASTNode.generate_sync_schema(String m,PrintWriter o) {
        throw new NotImplementedYetException(this);
    }

    public void Model.generate_sync_schema(String m,PrintWriter o) {
        for (ModuleDecl dec : getModuleDecls()) {
            dec.generate_sync_schema(m,o);
        }
    }

    public void ModuleDecl.generate_sync_schema(String m,PrintWriter o) {
        for (Decl decl : getDecls()) {
            decl.generate_sync_schema(m,o);
        }
        if (hasBlock()) {
            getBlock().generate_sync_schema(m,o);
        }
    }

    public void Block.generate_sync_schema(String m,PrintWriter o) {
        o.println();
        o.print("I am in block of method "+m);
        o.println();
        getStmtList().generate_sync_schema(m,o);
        o.print("I am going out of block of method "+m);
        o.println();
    }



    public void MainBlock.generate_sync_schema(String m,PrintWriter o) {
        o.print("main ::");
        o.print("{main}");
        o.println();
        o.print("I am in main block:");
        o.println();
        getStmtList().generate_sync_schema("main",o);
        o.print("I am going out of main block:");
        o.println();
    }

    public void AssertStmt.generate_sync_schema(String m,PrintWriter o) {
    }

    public void ThrowStmt.generate_sync_schema(String m,PrintWriter o) {
    }

    public void DieStmt.generate_sync_schema(String m,PrintWriter o) {
    }

    public void AssignStmt.generate_sync_schema(String m,PrintWriter o) {
        getValue().generate_sync_schema(m,o);
    }

    public void Call1Exp.generate_sync_schema(String m, PrintWriter o) {
        /*
        String method = getMethod();
        PureExp callee = getCallee();
        //List<PureExp> param = getParamList();
        Set<PureExp> objs = new HashSet<PureExp>();
        objs.add(callee);
        for (PureExp x : getPList())
            objs.add(x);
        //Set<Set<PureExp>> sync_set = syn_map.get(m);
        //sync_set = merge_schema(sync_set,objs);
        */
        o.println();
        o.print(m+"  :");
        o.println();
        o.print("parameters ,");
        o.println();
        o.print(" {this,");
        for (PureExp x : getPList())
        {

             o.print(x);
             o.print(",");
        }
        o.print("}");
    }

    public void Call.generate_sync_schema(String m, PrintWriter o) {
            /*
            String method = getMethod();
            PureExp callee = getCallee();
            //List<PureExp> param = getParamList();
            Set<PureExp> objs = new HashSet<PureExp>();
            objs.add(callee);
            for (PureExp x : getPList())
                objs.add(x);
            //Set<Set<PureExp>> sync_set = syn_map.get(m);
            //sync_set = merge_schema(sync_set,objs);
            */
            o.println();
            o.print(m+" {this,");
            for (PureExp x : getParamList())
            {
                 o.print(x);
                 o.print(",");
            }
    }

    public Set<Set<PureExp>> Call.merge_schema(Set<Set<PureExp>> sync_set, Set<PureExp> objs){
        if(sync_set.isEmpty())
        {
            Set<Set<PureExp>> temp = new HashSet<Set<PureExp>>();
            temp.add(objs);
            return temp;
        }
        else
        {
            Iterator<Set<PureExp>> i = sync_set.iterator();
            while(i.hasNext())
            {
               Set<PureExp> intersection = new HashSet<PureExp>(i.next());
               intersection.retainAll(objs);
               if(!intersection.isEmpty())
               {
                    Set<PureExp> temp = new HashSet<PureExp>(i.next());
                    sync_set.remove(i.next());
                    temp.addAll(objs);
                    sync_set.add(temp);
                    break;
               }
            }
            return sync_set;
        }
    }

    public void GetExp.generate_sync_schema(String m,PrintWriter o) {
    }

    public void AddResStmt.generate_sync_schema(String m,PrintWriter o) {
    }

    public void HoldExp.generate_sync_schema(String m,PrintWriter o) {
    }

    public void ReleaseResStmt.generate_sync_schema(String m,PrintWriter o) {
    }

    public void NewExp.generate_sync_schema(String m,PrintWriter o) {
    }

    public void OriginalCall.generate_sync_schema(String m,PrintWriter o) {
    }

    public void AwaitStmt.generate_sync_schema(String m,PrintWriter o) {
    }

    public void AndGuard.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ClaimGuard.generate_sync_schema(String m,PrintWriter o) {

    }

    public void DurationGuard.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ExpGuard.generate_sync_schema(String m,PrintWriter o) {

    }

    public void CostStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ExpressionStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void IfStmt.generate_sync_schema(String m,PrintWriter o) {
        getThen().generate_sync_schema(m,o);
        if (hasElse()) {
            getElse().generate_sync_schema(m,o);
        }
    }

    public void ReturnStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void SkipStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void SuspendStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void VarDeclStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void VarDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void WhileStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ForeachStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void CaseStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    public void TryCatchFinallyStmt.generate_sync_schema(String m,PrintWriter o) {

    }

    abstract public void Export.generate_sync_schema(String m,PrintWriter o);

    public void NamedExport.generate_sync_schema(String m,PrintWriter o) {

    }

    public void Name.generate_sync_schema(String m,PrintWriter o) {

    }
    public void StarExport.generate_sync_schema(String m,PrintWriter o) {

    }

    public void FromExport.generate_sync_schema(String m,PrintWriter o) {

    }

    public void NamedImport.generate_sync_schema(String m,PrintWriter o) {

    }
    public void StarImport.generate_sync_schema(String m,PrintWriter o) {

    }
    public void FromImport.generate_sync_schema(String m,PrintWriter o) {

    }

    public void TypeSynDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void InterfaceDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void MethodSig.generate_sync_schema(String m,PrintWriter o) {
      //String name = null;
      //List<ParamDecl> param = getParamList();
      //Set<PureExp> objs = new HashSet<PureExp>();
      o.print(m+"::->");
      o.print(" {");
      for (ParamDecl x : getParamList())
      {
        o.print(x.getName());
        o.print(",");
      }
      o.print("}");
      o.println();
    }

    public void ClassDecl.generate_sync_schema(String m,PrintWriter o) {
        List<MethodImpl> methods = getMethodList();
        if (methods.getNumChild() > 0) {
            methods.generate_sync_schema(m,o);
        }
    }

    public void FieldDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void MethodImpl.generate_sync_schema(String m,PrintWriter o) {
      String name = getMethodSig().getName();
      o.print("I am in method "+name);
      o.println();
      getMethodSig().generate_sync_schema(name,o);
      getBlock().generate_sync_schema(name,o);
    }

    public void TypeParameterDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void DataTypeDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void DataTypeUse.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ParametricDataTypeUse.generate_sync_schema(String m,PrintWriter o) {

    }

    public void TypedAnnotation.generate_sync_schema(String m,PrintWriter o) {

    }

    public void Annotation.generate_sync_schema(String m,PrintWriter o) {

    }

    public void TypeParameterUse.generate_sync_schema(String m,PrintWriter o) {

    }

    public void InterfaceTypeUse.generate_sync_schema(String m,PrintWriter o) {

    }

    public void FieldUse.generate_sync_schema(String m,PrintWriter o) {

    }

    public void VarUse.generate_sync_schema(String m,PrintWriter o) {

    }

    public void Binary.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ConBinary.generate_sync_schema(String m,PrintWriter o) {

    }

    public void CaseExp.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ParamDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void IntLiteral.generate_sync_schema(String m,PrintWriter o) {

    }

    public void StringLiteral.generate_sync_schema(String m,PrintWriter o) {

    }

    public void FloatLiteral.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ListLiteral.generate_sync_schema(String m,PrintWriter o) {

    }

    public void NullExp.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ThisExp.generate_sync_schema(String m,PrintWriter o) {

    }

    public void DestinyExp.generate_sync_schema(String m,PrintWriter o) {

    }

    public void MinusExp.generate_sync_schema(String m,PrintWriter o) {

    }

    public void NegExp.generate_sync_schema(String m,PrintWriter o) {

    }

    public void FunctionDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void PartialFunctionDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void FunctionParamDecl.generate_sync_schema(String m,PrintWriter o) {

    }

    public void PartialFunctionDef.generate_sync_schema(String m,PrintWriter o) {}


    public void NamedParFnAppParam.generate_sync_schema(String m,PrintWriter o) {}


    public void FnApp.generate_sync_schema(String m,PrintWriter o) {}

    public void AnonymousFunctionDecl.generate_sync_schema(String m,PrintWriter o) {

    }


    public void BuiltinFunctionDef.generate_sync_schema(String m,PrintWriter o) {

    }

    public void ExpFunctionDef.generate_sync_schema(String m,PrintWriter o) {

    }
    public void DataConstructorExp.generate_sync_schema(String m,PrintWriter o) { }

}


