// Resource Management
// Translation fetches resources from the database and store them in a resource map in the ABS program.
// The following code helps to add, acquire and release the resources.
data Availability = Free | Busy;
interface ResourceManager {
    List<Int> addRes(List<Pair<Int,Quality>> newResources);
    List<Int> holdRes(List<Pair<Int,Quality>> wantedResources);
    List<Int> findRes(Pair<Int,Quality> wantedResource);
    List<Int> findMoreEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Int>> findNearestMoreEfficientRes(Pair<Int,Quality> wantedResource);
    List<Int> findLessEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Int>> findNearestLessEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Int>> findNearestRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResources(Quality q);
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> sortResources(List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> lr);
    Unit releaseRes(List<Int> ids);
    Unit print();
    Unit updateCost(Int x);
    Unit updateEfficiency();
}

class ResourceManager implements ResourceManager {
    Int cst = 0;
    Map<Int, Pair<Availability, Pair<Int,Quality>>> resources = map[];
    Int resource_counter = 0;
    Unit updateEfficiency()
    {
        foreach (entry in entries(this.resources)) {
            if (fst(snd(entry)) == Free && snd(snd(snd(entry))) != Ferry)
            {
                Pair<Int,Quality> p = snd(snd(entry));
                Pair<Int,Quality> p1 = Pair(random(50)+50,snd(p));
                this.resources = put(this.resources, fst(entry), Pair(Free,p1));
            }
        }
    }
    Unit print() {
        print(`;Cost = %$cst$`);
    }
    List<Int> addRes(List<Pair<Int,Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        //print(toString(resources));
        return result;
    }

    List<Int> holdRes(List<Pair<Int,Quality>> wantedResources) {
        List<Int> result = list[];
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(q) == fst(snd(snd(entry))) && snd(q) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
                print(`;hold retrying: Resources = $this.resources$ We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired all the requested resources :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
        }

        //print(toString(this.resources));
        return result;
    }

    List<Int> findRes(Pair<Int,Quality> wantedResource)
    {
            List<Int> result = list[];
            Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
            while (result == Nil) {
                //foreach (q in wantedResources) {
                    Bool found = False;
                    foreach (entry in entries(lr)) {
                        if (!found
                            && fst(snd(entry)) == Free
                            && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                        }
                    }
                //}
                if (length(result) != 1 ){
                    // we did not find the required resource
                    print(`;hold retrying: Resources = $this.resources$ We want $wantedResource$`);
                    result = Nil;
                    lr = this.resources;
                    await this.resources != lr;
                    lr = this.resources;
                } else {
                    // we're happy
                    /*
                    print("***********************************************");
                    print("We have acquired the requested resource :)");
                    print("***********************************************");
                    */
                    this.resources = lr;
                }
            }

            //print(toString(this.resources));
            return result;
        }
    List<Int> findMoreEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Int> result = Nil;
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        //while (result == Nil) {
            //foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            //}
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in entries(lr)) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) < fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            //print("***********************************************");
                            //print("We have acquired the more efficient resource :)");
                            //print("***********************************************");
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired the requested resource :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
        //}
        //print(toString(this.resources));
        return result;
    }

    List<Pair<Int,Int>> findNearestMoreEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Pair<Int,Int>> result = list[];
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResList = this.getResources(snd(wantedResource));
        //print("Got Resources");
        //print(toString(getResList));
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> resList = this.sortResources(getResList);
        //print("Sorted Resources");
        //print(toString(resList));
        //while (result == Nil) {
            Bool found = False;
            foreach (entry in resList) {
                if (!found
                    && fst(snd(entry)) == Free
                    && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                {
                    found = True;
                    result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                    lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                }
            }
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in resList) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) < fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            /*
                            print("***********************************************");
                            print("We have acquired the nearest more efficient resource :)");
                            print("***********************************************");
                            */
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired the requested resource :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
        //}
        //print(toString(this.resources));
        return result;
    }
    List<Int> findLessEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Int> result = Nil;
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        //while (result == Nil) {
            //foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            //}
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in entries(lr)) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) > fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            /*
                            print("***********************************************");
                            print("We have acquired the less efficient resource :)");
                            print("***********************************************");
                            */
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired the requested resource :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
            //}
            //print(toString(this.resources));
            return result;
        }

        List<Pair<Int,Int>> findNearestLessEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
        {
            List<Pair<Int,Int>> result = list[];
            Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
            List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResList = this.getResources(snd(wantedResource));
            //print("Got Resources");
            //print(toString(getResList));
            List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> resList = this.sortResources(getResList);
            //print("Sorted Resources");
            //print(toString(resList));
            resList = reverse(resList);
            //print("Reversed Resources");
            //print(toString(resList));
            //while (result == Nil) {
                Bool found = False;
                foreach (entry in resList) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
                if (length(result) != 1 ){
                    // we did not find the required resource
                    found = False;
                    foreach (entry in resList) {
                        if (!found && fst(snd(entry)) == Free
                            && snd(wantedResource) == snd(snd(snd(entry))))
                        {
                            if(fst(wantedResource) > fst(snd(snd(entry))))
                            {
                                found = True;
                                result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                                lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                                /*
                                print("***********************************************");
                                print("We have acquired the nearest less efficient resource :)");
                                print("***********************************************");
                                */
                                this.resources = lr;
                            }
                        }
                    }
                } else {
                    // we're happy
                    /*
                    print("***********************************************");
                    print("We have acquired the requested resource :)");
                    print("***********************************************");
                    */
                    this.resources = lr;
                }
            //}
            //print(toString(this.resources));
            return result;
        }
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResources(Quality q)
    {
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mapToList = list(Nil);
        foreach (entry in entries(lr)) {
            if (q == snd(snd(snd(entry))))
            {
                mapToList = appendright(mapToList, entry);
            }
        }
        return mapToList;
    }

    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> sortResources(List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> lr)
    {
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mapToList = list(Nil);
        foreach (c in lr) {
        if ( isEmpty(mapToList) ){
              mapToList = appendright(mapToList, c);
            } else {
              Int i = 0;
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> left = list(Nil);
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> right = list(Nil);
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mid = list(Nil);
              Bool flag = True;
              while (( i < length(mapToList) )) {
                if(fst(snd(snd(nth(mapToList, i)))) <= fst(snd(snd(c)))){
                  left = appendright(left, nth(mapToList, i));
                } else {
                  while (( i < length(mapToList) )) {
                    right = appendright(right, nth(mapToList, i));
                    i = ( i + 1 );
                  }
                  mid = appendright(mid, c);
                  mapToList = concatenate(left, concatenate(mid, right));
                  flag = False;
                }
                i = ( i + 1 );
              }
              if ( ( flag == True ) ){
                mapToList = appendright(left, c);
              }
            }
        }
        return mapToList;
    }
    List<Pair<Int,Int>> findNearestRes(Pair<Int,Quality> wantedResource)
    {
        List<Pair<Int,Int>> r = list(Nil);
        while(isEmpty(r)){
            this.updateEfficiency();
            r = this.findNearestMoreEfficientRes(wantedResource);
            if(isEmpty(r))
                r = this.findNearestLessEfficientRes(wantedResource);
        }
        /*
        foreach(q in r)
        {
            this.cst = this.cst + snd(q);
        }
        */
        return r;
    }
    Unit releaseRes(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Pair<Int,Quality> > entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
        /*
        print("***********************************************");
        print("We have released all the acquired resources :)");
        print("***********************************************");
        */
        //print(toString(this.resources));
    }
    Unit updateCost(Int x)
    {
        this.cst = this.cst + x;
    }
}

// ABS does not support disjunction between future return tests (await f1? || await f2?)
// The following code is a syntactic sugar for the disjunction between the return tests.
// The code is not generic, supports only futures of integer type (Fut<Int>).

interface AwaitFut
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
        try {
            if(!isEmpty(fut)){
               foreach(f in fut)
               {
                   await f?;
               }
               resolved = True;
               print("Future Resolved:)");
            }
        } catch {
            NullPointerException  => print(`;Future is not initialized`);
        }
    }
    Bool checkFut()
    {
        return resolved;
    }
}
