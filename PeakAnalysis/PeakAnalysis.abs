module RPL;
export Quality;
export *;

import * from ABS.StdLib;

data RC = RC(Int rc);

data Quality = ResEfficiency(Int)| Int| ResCost(Int cst)| ResCapacity(Int)| Ferry| Doctor| SmokeMask| PoliceMan| Clerk| EODTech| FireFighter| FireExt| FirstAidBox;

interface ResourceCost {
  Int updateCost(Int c);
  Int printCost();}

class ResourceCost implements ResourceCost {
  Int cst = 0;
  Int updateCost(Int c){
    Int fake = 0;
    this.cst = ( this.cst + c );
    
    Int method_end = 0;
    return 0;
  }
  Int printCost(){
    Int fake = 0;
    println(( ( "%" + toString(this.cst) ) + "" ));
    
    Int method_end = 0;
    return 0;
  }
  }

interface Police {
  Int alarm(ECC ecc, EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c);
  Int repEmgInfo(ECC ecc, EOD eod, FB fb, Hospital h, List<Set<Quality>> res, Int totalEfficiency, List<Int> effPercentage, ResourceCost c);
  Int rushToSite(List<Set<Quality>> res, ResourceCost c);
  Int dealSituation(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int evacuation(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int rescue(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class Police implements Police {
  List<Pair<Int, Int>> rid = Nil;
  Int repEmgInfoCost = 100;
  Int rushToSiteCost = 30;
  Int dealSituationCost = 2500;
  Int evacuationCost = 2500;
  Int rescueCost = 2500;
  Int alarm(ECC ecc, EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c){
    Int fake = 0;
    Int x = 0;
    
    x = this.repEmgInfo(ecc, eod, fb, h, list[set[ResEfficiency( 10 ), Clerk]], 10, effPercentage, c);
    
    Int method_end = 0;
    return 0;
  }
  Int repEmgInfo(ECC ecc, EOD eod, FB fb, Hospital h, List<Set<Quality>> res, Int totalEfficiency, List<Int> effPercentage, ResourceCost c){
    Int fake = 0;
    Police p1 = new Police();
    Police p2 = new Police();
    Fut<Int> f1;
    Fut<Int> f2;
    Fut<Int> f3;
    Fut<Int> f4;
    Fut<Int> fc;
    Int x = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    Int ef = nth(effPercentage, 1);
    Int t = truncate(( ( this.repEmgInfoCost / totalEfficiency ) * ( 100 / ef ) ));
    
    [wait(t)] fake = 0;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    temp = fst(p);
    [j == release()] fake = 0;
    
    f1 = ecc!estEmgCtr();
    
    x = this.rushToSite(list[set[ResEfficiency( 30 ), Ferry]], c);
    
    f2 = p1!dealSituation(list[set[ResEfficiency( 25 ), PoliceMan], set[ResEfficiency( 25 ), PoliceMan]], 50, nth(effPercentage, 0), c);
    
    f3 = p2!evacuation(list[set[ResEfficiency( 25 ), PoliceMan], set[ResEfficiency( 25 ), PoliceMan]], 50, nth(effPercentage, 0), c);
    
    x = this.rescue(list[set[ResEfficiency( 25 ), PoliceMan], set[ResEfficiency( 25 ), PoliceMan]], 50, nth(effPercentage, 0), c);
    
    await f1? & f2? & f3?;
    
    f4 = ecc!makeEmgPlan(eod, fb, h, effPercentage, c);
    
    await f4?;
    
    Int method_end = 0;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    
    [wait(this.rushToSiteCost)] fake = 0;
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * this.rushToSiteCost ));
    
    await fc?;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int dealSituation(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate(( ( this.dealSituationCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int evacuation(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.evacuationCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int rescue(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.rescueCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  }

interface ECC {
  Int estEmgCtr();
  Int makeEmgPlan(EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c);
  Int doMediaCoverage();}

class ECC implements ECC {
  List<Pair<Int, Int>> rid = Nil;
  Int estEmgCtrCost = 10;
  Int doMediaCoverageCost = 10;
  Int estEmgCtr(){
    Int fake = 0;
    
    [wait(this.estEmgCtrCost)] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int makeEmgPlan(EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c){
    Int fake = 0;
    Int x = 0;
    Fut<Int> f1;
    Fut<Int> f2;
    Fut<Int> f3;
    
    f1 = eod!start(effPercentage, c);
    
    f2 = fb!start(effPercentage, c);
    
    f3 = h!start(effPercentage, c);
    
    await f1? & f2? & f3?;
    
    x = this.doMediaCoverage();
    
    Int method_end = 0;
    return 0;
  }
  Int doMediaCoverage(){
    Int fake = 0;
    
    [wait(this.doMediaCoverageCost)] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  }

interface EOD {
  Int start(List<Int> effPercentage, ResourceCost c);
  Int rushToSite(List<Set<Quality>> res, ResourceCost c);
  Int searchEOD(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int reportEOD(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class EOD implements EOD {
  List<Pair<Int, Int>> rid = Nil;
  Int rushToSiteCost = 30;
  Int searchEODCost = 250;
  Int reportEODCost = 100;
  Int start(List<Int> effPercentage, ResourceCost c){
    Int fake = 0;
    Int x = 0;
    
    x = this.rushToSite(list[set[ResEfficiency( 30 ), Ferry]], c);
    
    x = this.searchEOD(list[set[ResEfficiency( 25 ), EODTech]], 25, nth(effPercentage, 2), c);
    
    x = this.reportEOD(list[set[ResEfficiency( 10 ), Clerk]], 10, nth(effPercentage, 1), c);
    
    Int method_end = 0;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * this.rushToSiteCost ));
    
    await fc?;
    
    [wait(this.rushToSiteCost)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int searchEOD(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = Nil;
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate(( ( this.searchEODCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int reportEOD(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate(( ( this.reportEODCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  }

interface FB {
  Int start(List<Int> effPercentage, ResourceCost c);
  Int rushToSite(List<Set<Quality>> res, ResourceCost c);
  Int fightFire(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int mitigate(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int recoverSite(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int reportFireRescue(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class FB implements FB {
  List<Pair<Int, Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int fightFireCost = 2500;
  Int mitigateCost = 2500;
  Int recoverSiteCost = 2500;
  Int reportFireRescueCost = 100;
  Int start(List<Int> effPercentage, ResourceCost c){
    Int fake = 0;
    Int x = 0;
    FB fb1 = new FB();
    Fut<Int> f1;
    
    x = this.rushToSite(list[set[ResEfficiency( 30 ), Ferry]], c);
    
    x = this.fightFire(list[set[ResEfficiency( 25 ), FireFighter], set[ResEfficiency( 25 ), FireFighter]], 50, nth(effPercentage, 3), c);
    
    f1 = fb1!mitigate(list[set[ResEfficiency( 25 ), FireFighter], set[ResEfficiency( 25 ), FireFighter]], 50, nth(effPercentage, 3), c);
    
    x = this.recoverSite(list[set[ResEfficiency( 25 ), FireFighter], set[ResEfficiency( 25 ), FireFighter]], 50, nth(effPercentage, 3), c);
    
    await f1?;
    
    x = this.reportFireRescue(list[set[ResEfficiency( 10 ), Clerk]], 10, nth(effPercentage, 1), c);
    
    Int method_end = 0;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * this.rushToSiteCost ));
    
    await fc?;
    
    [wait(this.rushToSiteCost)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int fightFire(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate(( ( this.fightFireCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int mitigate(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.mitigateCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int recoverSite(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.recoverSiteCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int reportFireRescue(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.reportFireRescueCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  }

interface Hospital {
  Int start(List<Int> effPercentage, ResourceCost c);
  Int rushToSite(List<Set<Quality>> res, ResourceCost c);
  Int shuntWounded(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int treatSliInj(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int treatSevInj(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int reportMedRescue(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class Hospital implements Hospital {
  List<Pair<Int, Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int shuntWoundedCost = 900;
  Int treatSliInjCost = 900;
  Int treatSevInjCost = 2500;
  Int reportMedRescueCost = 100;
  Int start(List<Int> effPercentage, ResourceCost c){
    Int fake = 0;
    Int x = 0;
    Hospital h1 = new Hospital();
    Fut<Int> f1;
    
    x = this.rushToSite(list[set[ResEfficiency( 30 ), Ferry]], c);
    
    x = this.shuntWounded(list[set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor]], 30, nth(effPercentage, 4), c);
    
    f1 = h1!treatSliInj(list[set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor]], 30, nth(effPercentage, 4), c);
    
    x = this.treatSevInj(list[set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor]], 50, nth(effPercentage, 4), c);
    
    await f1?;
    
    x = this.reportMedRescue(list[set[ResEfficiency( 10 ), Clerk]], 10, nth(effPercentage, 1), c);
    
    Int method_end = 0;
    return 0;
  }
  Int rushToSite(List<Set<Quality>> res, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * this.rushToSiteCost ));
    
    await fc?;
    
    [wait(this.rushToSiteCost)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int shuntWounded(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.shuntWoundedCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int treatSliInj(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.treatSliInjCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int treatSevInj(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Fut<Int> fc;
    Int t = truncate(( ( this.treatSevInjCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  Int reportMedRescue(List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    Int fake = 0;
    List<Int> temp = list(Nil);
    Pair<List<Int>, Int> p = Pair(Nil,0);
    [j == acquire(res) ] fake = 0;
    temp = fst(p);
    Int t = truncate(( ( this.reportMedRescueCost / totalEfficiency ) * ( 100 / effPercentage ) ));
    Fut<Int> fc;
    
    fc = c!updateCost(( snd(p) * t ));
    
    await fc?;
    
    [wait(t)] fake = 0;
    [j == release()] fake = 0;
    
    Int method_end = 0;
    return 0;
  }
  }






interface Main{
Unit main( );
}
class IMain implements Main{
Unit main( ){
  Int fake = 0;
  Int count = 0;
  List<Fut<Int>> fl = Nil;
  ResourceCost c = new ResourceCost();
  while (( count < 1 )) {
    Police p = new Police();
    Police p1 = new Police();
    Police p2 = new Police();
    ECC ecc = new ECC();
    EOD eod = new EOD();
    FB fb = new FB();
    Hospital h = new Hospital();
    Int counter = 1;
    Int max = 5;
    while (( counter <= max )) {
      Fut<Int> f;
      
      f = p!alarm(ecc, eod, fb, h, list[100, 100, 100, 100, 100], c);
      fl = appendright(fl, f);
      counter = ( counter + 1 );
    }
    count = ( count + 1 );
  }
  while (! isEmpty(fl)) {
    Fut<Int> f3 = head(fl);
    
    await f3?;
    fl = tail(fl);
  }
  Rat t = timeValue(now());
  Int t1 = truncate(t);
  print(( ( "%" + toString(t1) ) + "" ));
  Fut<Int> fc;
  
  fc = c!printCost();
  
  await fc?;
  Int method_end = 0;
}
}
{
Main m = new IMain();
m ! main();
}

