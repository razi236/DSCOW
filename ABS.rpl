module ABS.ResourceManager;
import * from ABS.StdLib;
import * from RPL;
export *;
// Resource Management
// Translation fetches resources from the database and store them in a resource map in the ABS program.
// The following code helps to add, acquire and release the resources.

data Availability = Free | Busy;

interface ResourceManager {
    List<Int> addRes(List<Set<Quality>> newResources);
    Pair<List<Int>,Int> holdRes(List<Set<Quality>> wantedResources);
    Unit releaseRes(List<Int> ids);
    Unit computeResCost(List<Int> ids,Int t);
    Unit print();
}

class ResourceManager implements ResourceManager {
    Map<Int, Pair<Availability, Set<Quality>>> resources = map[];
    Int resource_counter = 0;
    String resource_cost = "";
    Unit computeResCost(List<Int> ids,Int t)
    {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Set<Quality>> entry = lookupUnsafe(resources, id);
                List<Quality> qualities = elements(snd(entry));
                println(toString(qualities));
                Quality q = nth(qualities,2);
                Int c = cst(q);
                println(toString(c));
                //resource_cost = resource_cost + "+(" + toString(q) + "*" + toString(t) + ")";
                //println(toString(cst));
            }
        }
    }
    Unit print() {
        println(toString(resource_cost));
    }
    List<Int> addRes(List<Set<Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        //println(toString(resources));
        return result;
    }

    Pair<List<Int>,Int> holdRes(List<Set<Quality>> wantedResources) {
        List<Int> result = list[];
        Int c = 0;
        Map<Int, Pair<Availability, Set<Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && isSubset(q, snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                        List<Quality> qualities = elements(snd(snd(entry)));
                        Quality q1 = nth(qualities,2);
                        c = c + cst(q1);
                        //println(toString(c));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
               // println(`hold retrying: Resources = $this.resources$ We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired all the requested resources :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
        }

        //println(toString(this.resources));
        return Pair(result,c);
    }

    Unit releaseRes(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Set<Quality>> entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
        /*
        println("***********************************************");
        println("We have released all the acquired resources :)");
        println("***********************************************");
        */

        //println(toString(this.resources));
    }
}



// ABS does not support disjunction between future return tests (await f1? || await f2?)
// The following code is a syntactic sugar for the disjunction between the return tests.
// The code is not generic, supports only futures of integer type (Fut<Int>).

interface AwaitFut
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
        try {
            if(!isEmpty(fut)){
               foreach(f in fut)
               {
                   await f?;
               }
               resolved = True;
               print("Future Resolved:)");
            }
        } catch {
            NullPointerException  => print(`;Future is not initialized`);
        }
    }
    Bool checkFut()
    {
        return resolved;
    }
}
module RPL;
import * from ABS.ResourceManager;
export Quality;
export *;

import * from ABS.StdLib;

data RC = RC(Int rc);

data Quality = ResEfficiency(Int)| Int| ResCost(Int cst)| ResCapacity(Int)| Ferry| Doctor| SmokeMask| PoliceMan| Clerk| EODTech| FireFighter| FireExt| FirstAidBox;

interface ResourceCost {
  Int updateCost(ResourceManager rm,Int c);
  Int printCost(ResourceManager rm);}

class ResourceCost implements ResourceCost {
  Int cst = 0;
  Int updateCost(ResourceManager rm,Int c){
    this.cst = ( this.cst + c );return 0;
  }
  Int printCost(ResourceManager rm){
    println(( ( "Cost = " + toString(this.cst) ) + "" ));return 0;
  }
  }

interface Police {
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c);
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h, List<Set<Quality>> res, Int totalEfficiency, List<Int> effPercentage, ResourceCost c);
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c);
  Int dealSituation(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int evacuation(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int rescue(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class Police implements Police {
  List<Pair<Int, Int>> rid = Nil;
  Int repEmgInfoCost = 100;
  Int rushToSiteCost = 30;
  Int dealSituationCost = 2500;
  Int evacuationCost = 2500;
  Int rescueCost = 2500;
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c){
    Int x = 0;[Deadline: Duration(400)]    x = this.repEmgInfo(rm,ecc, eod, fb, h, list[set[ResEfficiency( 10 ), Clerk]], 10, effPercentage, c);return 0;
  }
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h, List<Set<Quality>> res, Int totalEfficiency, List<Int> effPercentage, ResourceCost c){
    Police p1 = new Police();Police p2 = new Police();Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;Fut<Int> f4;Fut<Int> fc;Int x = 0;List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);Int ef = nth(effPercentage, 1);Int t = truncate(( ( this.repEmgInfoCost / totalEfficiency ) * ( 100 / ef ) ));duration(t, t);[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;temp = fst(p);await rm!releaseRes(temp);[Deadline: Duration(20)]    f1 = ecc!estEmgCtr(rm);[Deadline: Duration(50)]    x = this.rushToSite(rm,list[set[ResEfficiency( 30 ), Ferry]], c);[Deadline: Duration(80)]    f2 = p1!dealSituation(rm,list[set[ResEfficiency( 25 ), PoliceMan], set[ResEfficiency( 25 ), PoliceMan]], 50, nth(effPercentage, 0), c);[Deadline: Duration(80)]    f3 = p2!evacuation(rm,list[set[ResEfficiency( 25 ), PoliceMan], set[ResEfficiency( 25 ), PoliceMan]], 50, nth(effPercentage, 0), c);[Deadline: Duration(80)]    x = this.rescue(rm,list[set[ResEfficiency( 25 ), PoliceMan], set[ResEfficiency( 25 ), PoliceMan]], 50, nth(effPercentage, 0), c);await f1? & f2? & f3?;[Deadline: Duration(250)]    f4 = ecc!makeEmgPlan(rm,eod, fb, h, effPercentage, c);await f4?;return 0;
  }
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);duration(this.rushToSiteCost, this.rushToSiteCost);Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * this.rushToSiteCost ));await fc?;await rm!releaseRes(temp);return 0;
  }
  Int dealSituation(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;Int t = truncate(( ( this.dealSituationCost / totalEfficiency ) * ( 100 / effPercentage ) ));[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int evacuation(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.evacuationCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int rescue(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.rescueCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  }

interface ECC {
  Int estEmgCtr(ResourceManager rm);
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c);
  Int doMediaCoverage(ResourceManager rm);}

class ECC implements ECC {
  List<Pair<Int, Int>> rid = Nil;
  Int estEmgCtrCost = 10;
  Int doMediaCoverageCost = 10;
  Int estEmgCtr(ResourceManager rm){
    duration(this.estEmgCtrCost, this.estEmgCtrCost);return 0;
  }
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h, List<Int> effPercentage, ResourceCost c){
    Int x = 0;Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;[Deadline: Duration(100)]    f1 = eod!start(rm,effPercentage, c);[Deadline: Duration(240)]    f2 = fb!start(rm,effPercentage, c);[Deadline: Duration(180)]    f3 = h!start(rm,effPercentage, c);await f1? & f2? & f3?;[Deadline: Duration(20)]    x = this.doMediaCoverage(rm);return 0;
  }
  Int doMediaCoverage(ResourceManager rm){
    duration(this.doMediaCoverageCost, this.doMediaCoverageCost);return 0;
  }
  }

interface EOD {
  Int start(ResourceManager rm,List<Int> effPercentage, ResourceCost c);
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c);
  Int searchEOD(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int reportEOD(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class EOD implements EOD {
  List<Pair<Int, Int>> rid = Nil;
  Int rushToSiteCost = 30;
  Int searchEODCost = 250;
  Int reportEODCost = 100;
  Int start(ResourceManager rm,List<Int> effPercentage, ResourceCost c){
    Int x = 0;[Deadline: Duration(50)]    x = this.rushToSite(rm,list[set[ResEfficiency( 30 ), Ferry]], c);[Deadline: Duration(20)]    x = this.searchEOD(rm,list[set[ResEfficiency( 25 ), EODTech]], 25, nth(effPercentage, 2), c);[Deadline: Duration(20)]    x = this.reportEOD(rm,list[set[ResEfficiency( 10 ), Clerk]], 10, nth(effPercentage, 1), c);return 0;
  }
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * this.rushToSiteCost ));await fc?;duration(this.rushToSiteCost, this.rushToSiteCost);await rm!releaseRes(temp);return 0;
  }
  Int searchEOD(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = Nil;Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;Int t = truncate(( ( this.searchEODCost / totalEfficiency ) * ( 100 / effPercentage ) ));[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int reportEOD(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;Int t = truncate(( ( this.reportEODCost / totalEfficiency ) * ( 100 / effPercentage ) ));[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  }

interface FB {
  Int start(ResourceManager rm,List<Int> effPercentage, ResourceCost c);
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c);
  Int fightFire(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int mitigate(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int recoverSite(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int reportFireRescue(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class FB implements FB {
  List<Pair<Int, Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int fightFireCost = 2500;
  Int mitigateCost = 2500;
  Int recoverSiteCost = 2500;
  Int reportFireRescueCost = 100;
  Int start(ResourceManager rm,List<Int> effPercentage, ResourceCost c){
    Int x = 0;FB fb1 = new FB();Fut<Int> f1;[Deadline: Duration(50)]    x = this.rushToSite(rm,list[set[ResEfficiency( 30 ), Ferry]], c);[Deadline: Duration(70)]    x = this.fightFire(rm,list[set[ResEfficiency( 25 ), FireFighter], set[ResEfficiency( 25 ), FireFighter]], 50, nth(effPercentage, 3), c);[Deadline: Duration(70)]    f1 = fb1!mitigate(rm,list[set[ResEfficiency( 25 ), FireFighter], set[ResEfficiency( 25 ), FireFighter]], 50, nth(effPercentage, 3), c);[Deadline: Duration(50)]    x = this.recoverSite(rm,list[set[ResEfficiency( 25 ), FireFighter], set[ResEfficiency( 25 ), FireFighter]], 50, nth(effPercentage, 3), c);await f1?;[Deadline: Duration(50)]    x = this.reportFireRescue(rm,list[set[ResEfficiency( 10 ), Clerk]], 10, nth(effPercentage, 1), c);return 0;
  }
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * this.rushToSiteCost ));await fc?;duration(this.rushToSiteCost, this.rushToSiteCost);await rm!releaseRes(temp);return 0;
  }
  Int fightFire(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;Int t = truncate(( ( this.fightFireCost / totalEfficiency ) * ( 100 / effPercentage ) ));[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int mitigate(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.mitigateCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int recoverSite(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.recoverSiteCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int reportFireRescue(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.reportFireRescueCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  }

interface Hospital {
  Int start(ResourceManager rm,List<Int> effPercentage, ResourceCost c);
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c);
  Int shuntWounded(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int treatSliInj(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int treatSevInj(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);
  Int reportMedRescue(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c);}

class Hospital implements Hospital {
  List<Pair<Int, Int>> rid = list(Nil);
  Int rushToSiteCost = 30;
  Int shuntWoundedCost = 900;
  Int treatSliInjCost = 900;
  Int treatSevInjCost = 2500;
  Int reportMedRescueCost = 100;
  Int start(ResourceManager rm,List<Int> effPercentage, ResourceCost c){
    Int x = 0;Hospital h1 = new Hospital();Fut<Int> f1;[Deadline: Duration(50)]    x = this.rushToSite(rm,list[set[ResEfficiency( 30 ), Ferry]], c);[Deadline: Duration(50)]    x = this.shuntWounded(rm,list[set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor]], 30, nth(effPercentage, 4), c);[Deadline: Duration(50)]    f1 = h1!treatSliInj(rm,list[set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor]], 30, nth(effPercentage, 4), c);[Deadline: Duration(70)]    x = this.treatSevInj(rm,list[set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor], set[ResEfficiency( 10 ), Doctor]], 50, nth(effPercentage, 4), c);await f1?;[Deadline: Duration(20)]    x = this.reportMedRescue(rm,list[set[ResEfficiency( 10 ), Clerk]], 10, nth(effPercentage, 1), c);return 0;
  }
  Int rushToSite(ResourceManager rm,List<Set<Quality>> res, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * this.rushToSiteCost ));await fc?;duration(this.rushToSiteCost, this.rushToSiteCost);await rm!releaseRes(temp);return 0;
  }
  Int shuntWounded(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.shuntWoundedCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int treatSliInj(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.treatSliInjCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int treatSevInj(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Fut<Int> fc;Int t = truncate(( ( this.treatSevInjCost / totalEfficiency ) * ( 100 / effPercentage ) ));[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  Int reportMedRescue(ResourceManager rm,List<Set<Quality>> res, Int totalEfficiency, Int effPercentage, ResourceCost c){
    List<Int> temp = list(Nil);Pair<List<Int>, Int> p = await rm!holdRes(res);temp = fst(p);Int t = truncate(( ( this.reportMedRescueCost / totalEfficiency ) * ( 100 / effPercentage ) ));Fut<Int> fc;[Deadline: Duration(10)]    fc = c!updateCost(rm,( snd(p) * t ));await fc?;duration(t, t);await rm!releaseRes(temp);return 0;
  }
  }






{
  ResourceManager rm = new ResourceManager();
  await rm!addRes(list[set[Doctor, ResEfficiency(10), ResCost(500), ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[EODTech, ResEfficiency(25), ResCost(700) , ResCapacity(1)], set[FireFighter, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[FireFighter, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[FireFighter, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[Ferry, ResEfficiency(30), ResCost(1000) , ResCapacity(1)], set[Clerk, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Clerk, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[PoliceMan, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[PoliceMan, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[PoliceMan, ResEfficiency(25), ResCost(500) , ResCapacity(1)]]);
  Int count = 0;
  List<Fut<Int>> fl = Nil;
  ResourceCost c = new ResourceCost();
  while (( count < 1 )) {
    Police p = new Police();
    Police p1 = new Police();
    Police p2 = new Police();
    ECC ecc = new ECC();
    EOD eod = new EOD();
    FB fb = new FB();
    Hospital h = new Hospital();
    Int counter = 1;
    Int max = 1;
    while (( counter <= max )) {
      Fut<Int> f;
      Int r1 = ( random(50) + 50 );
      Int r2 = ( random(50) + 50 );
      Int r3 = ( random(50) + 50 );
      Int r4 = ( random(50) + 50 );
      Int r5 = ( random(50) + 50 );
      [Deadline: Duration(( 400 * max ))]      f = p!alarm(rm,ecc, eod, fb, h, list[50, 60, 50, 60, 50], c);
      fl = appendright(fl, f);
      counter = ( counter + 1 );
    }
    count = ( count + 1 );
  }
  while (! isEmpty(fl)) {
    Fut<Int> f3 = head(fl);
    await f3?;
    fl = tail(fl);
  }
  Rat t = timeValue(now());
  Int t1 = truncate(t);
  println(( ( "Time = " + toString(t1) ) + "" ));
  Fut<Int> fc;
  [Deadline: Duration(5)]  fc = c!printCost(rm);
  await fc?;
  await rm!print();
}
