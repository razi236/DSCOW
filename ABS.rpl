module ABS.ResourceManager;
import * from ABS.StdLib;
export *;
data Quality = Efficiency(Int) | Pathologist | BioTechnician | ProcessingMachine | EmbeddingMachine | StainingMachine | Receptionist | VanDriver | DeliveryVan | HeadWaiter | RunnerWaiter | Cook | CookAssistant;

// Resource Management
// Translation fetches resources from the database and store them in a resource map in the ABS program.
// The following code helps to add, acquire and release the resources.

data Availability = Free | Busy;

interface ResourceManager {
    List<Int> addRes(List<Set<Quality>> newResources);
    List<Int> holdRes(List<Set<Quality>> wantedResources);
    Unit releaseRes(List<Int> ids);
    Unit print();
}

class ResourceManager implements ResourceManager {
    Map<Int, Pair<Availability, Set<Quality>>> resources = map[];
    Int resource_counter = 0;

    Unit print() {
        println(toString(resources));
    }
    List<Int> addRes(List<Set<Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        //println(toString(resources));
        return result;
    }

    List<Int> holdRes(List<Set<Quality>> wantedResources) {
        List<Int> result = list[];
        Map<Int, Pair<Availability, Set<Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && isSubset(q, snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
                println(`hold retrying: Resources = $this.resources$ We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired all the requested resources :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
        }

        //println(toString(this.resources));
        return result;
    }

    Unit releaseRes(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Set<Quality>> entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
        /*
        println("***********************************************");
        println("We have released all the acquired resources :)");
        println("***********************************************");
        */

        //println(toString(this.resources));
    }
}

// ABS does not support disjunction between future return tests (await f1? || await f2?)
// The following code is a syntactic sugar for the disjunction between the return tests.
// The code is not generic, supports only futures of integer type (Fut<Int>).

interface AwaitFut
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
        try {
            if(!isEmpty(fut)){
               foreach(f in fut)
               {
                   await f?;
               }
               resolved = True;
               println("Future Resolved:)");
            }
        } catch {
            NullPointerException  => println(`Future is not initialized`);
        }
    }
    Bool checkFut()
    {
        return resolved;
    }
}
module Pathology_Workflow;
import * from ABS.ResourceManager;

import * from ABS.StdLib;

data Case = Case(Int case_ID, String case_Type, Int priority, String patho_team, Int no_of_containers);

interface Pathology {
  Unit register_case(ResourceManager rm,Case c);
  List<Case> get_case_list(ResourceManager rm);}

class Pathology implements Pathology {
  List<Case> case_list = list(Nil);
  Unit register_case(ResourceManager rm,Case c){
    if ( isEmpty(this.case_list) ){
      this.case_list = appendright(this.case_list, c);
    } else {
      Int i = 0;
      List<Case> left = list(Nil);
      List<Case> right = list(Nil);
      List<Case> mid = list(Nil);
      Bool flag = True;
      while (( i < length(this.case_list) )) {
        if ( ( priority(nth(this.case_list, i)) <= priority(c) ) ){
          left = appendright(left, nth(this.case_list, i));
        } else {
          while (( i < length(this.case_list) )) {
            right = appendright(right, nth(this.case_list, i));
            i = ( i + 1 );
          }
          mid = appendright(mid, c);
          this.case_list = concatenate(left, concatenate(mid, right));
          flag = False;
        }
        i = ( i + 1 );
      }
      if ( ( flag == True ) ){
        this.case_list = appendright(left, c);
      }
    }
  }
  List<Case> get_case_list(ResourceManager rm){
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "get_case_list" have missed the deadline.`);
    }
    return this.case_list;
  }
  }












{
  ResourceManager rm = new ResourceManager();
  await rm!addRes(list[set[Pathologist, Efficiency(3)], set[BioTechnician, Efficiency(5)], set[BioTechnician, Efficiency(3)], set[BioTechnician, Efficiency(10)], set[VanDriver, Efficiency(5)], set[DeliveryVan, Efficiency(1500)], set[BioTechnician, Efficiency(2)], set[BioTechnician, Efficiency(2)], set[BioTechnician, Efficiency(2)], set[BioTechnician, Efficiency(2)], set[ProcessingMachine, Efficiency(10)], set[ProcessingMachine, Efficiency(10)], set[StainingMachine, Efficiency(5)], set[StainingMachine, Efficiency(5)], set[Pathologist, Efficiency(2)], set[HeadWaiter, Efficiency(2)], set[RunnerWaiter, Efficiency(1)], set[RunnerWaiter, Efficiency(1)], set[Cook, Efficiency(5)], set[CookAssistant, Efficiency(1)], set[CookAssistant, Efficiency(1)], set[CookAssistant, Efficiency(1)], set[Cook, Efficiency(3)]]);
  Case c = Case( 123, "Blood Sample", 3, "Gyno", 2 );
  Case c1 = Case( 345, "Blood Sample", 3, "Gyno", 2 );
  Case c2 = Case( 678, "Blood Sample", 2, "Gyno", 2 );
  Pathology p = new Pathology();
  List<Case> case_list = list(Nil);
  Fut<Unit> f;
  [Deadline: Duration(5)]  f = p!register_case(rm,c);
  await f?;
  Fut<Unit> f1;
  [Deadline: Duration(5)]  f1 = p!register_case(rm,c1);
  await f1?;
  Fut<Unit> f2;
  [Deadline: Duration(5)]  f2 = p!register_case(rm,c2);
  await f2?;
  Fut<List<Case>> f3;
  [Deadline: Duration(5)]  f3 = p!get_case_list(rm);
  case_list = f3.get;
  println(toString(case_list));
}
