module ABS.ResourceManager;
import * from ABS.StdLib;
import * from RPL;
export *;
// Resource Management
// Translation fetches resources from the database and store them in a resource map in the ABS program.
// The following code helps to add, acquire and release the resources.

data Availability = Free | Busy;

interface ResourceManager {
    List<Int> addRes(List<Set<Quality>> newResources);
    Pair<List<Int>,Int> holdRes(List<Set<Quality>> wantedResources);
    Unit releaseRes(List<Int> ids);
    Unit computeResCost(List<Int> ids,Int t);
    Unit print();
}

class ResourceManager implements ResourceManager {
    Map<Int, Pair<Availability, Set<Quality>>> resources = map[];
    Int resource_counter = 0;
    String resource_cost = "";
    Unit computeResCost(List<Int> ids,Int t)
    {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Set<Quality>> entry = lookupUnsafe(resources, id);
                List<Quality> qualities = elements(snd(entry));
                println(toString(qualities));
                Quality q = nth(qualities,2);
                Int c = cst(q);
                println(toString(c));
                //resource_cost = resource_cost + "+(" + toString(q) + "*" + toString(t) + ")";
                //println(toString(cst));
            }
        }
    }
    Unit print() {
        println(toString(resource_cost));
    }
    List<Int> addRes(List<Set<Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        //println(toString(resources));
        return result;
    }

    Pair<List<Int>,Int> holdRes(List<Set<Quality>> wantedResources) {
        List<Int> result = list[];
        Int c = 0;
        Map<Int, Pair<Availability, Set<Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && isSubset(q, snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                        List<Quality> qualities = elements(snd(snd(entry)));
                        Quality q1 = nth(qualities,2);
                        c = c + cst(q1);
                        //println(toString(c));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
               // println(`hold retrying: Resources = $this.resources$ We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired all the requested resources :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
        }

        //println(toString(this.resources));
        return Pair(result,c);
    }

    Unit releaseRes(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Set<Quality>> entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
        /*
        println("***********************************************");
        println("We have released all the acquired resources :)");
        println("***********************************************");
        */

        //println(toString(this.resources));
    }
}



// ABS does not support disjunction between future return tests (await f1? || await f2?)
// The following code is a syntactic sugar for the disjunction between the return tests.
// The code is not generic, supports only futures of integer type (Fut<Int>).

interface AwaitFut
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
        try {
            if(!isEmpty(fut)){
               foreach(f in fut)
               {
                   await f?;
               }
               resolved = True;
               print("Future Resolved:)");
            }
        } catch {
            NullPointerException  => print(`;Future is not initialized`);
        }
    }
    Bool checkFut()
    {
        return resolved;
    }
}
module RPL;
import * from ABS.ResourceManager;
export Quality;
export *;

import * from ABS.StdLib;

data RC = RC(Int rc);

data Quality = ResEfficiency(Int)| Int| ResCost(Int cst)| ResCapacity(Int)| Ferry| Doctor| SmokeMask| PoliceMan| Clerk| EODTech| FireFighter| FireExt| FirstAidBox;

interface DL {
  Int check(ResourceManager rm);}

class DLD implements DL {
  
  Int check(ResourceManager rm){
    Int i = 0;duration(599, 599);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "check" have missed the deadline.`);
    }
    return 0;
  }
  }






{
  ResourceManager rm = new ResourceManager();
  await rm!addRes(list[set[Doctor, ResEfficiency(10), ResCost(500), ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Doctor, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[EODTech, ResEfficiency(25), ResCost(700) , ResCapacity(1)], set[FireFighter, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[FireFighter, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[FireFighter, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[Ferry, ResEfficiency(30), ResCost(1000) , ResCapacity(1)], set[Clerk, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[Clerk, ResEfficiency(10), ResCost(500) , ResCapacity(1)], set[PoliceMan, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[PoliceMan, ResEfficiency(25), ResCost(500) , ResCapacity(1)], set[PoliceMan, ResEfficiency(25), ResCost(500) , ResCapacity(1)]]);
  DL o = new DLD();
  Fut<Int> f;
  Fut<Int> f1;
  Fut<Int> f2;
  [Deadline: Duration(21)]  f = o!check(rm);
  [Deadline: Duration(21)]  f1 = o!check(rm);
  [Deadline: Duration(21)]  f2 = o!check(rm);
  await f? & f1? & f2?;
  println("RplTools");
  await rm!print();
}
