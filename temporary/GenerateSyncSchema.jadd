import java.io.PrintWriter;
import org.abs_models.backend.cost.*;
import java.util.stream.Collectors;
import com.google.common.collect.Streams;

aspect generate_sync_schema {

    /** Controls whether to include the standard library in generate_sync_schema
     */

    public boolean Model.generate_sync_schemaStdLib = false;

    public Map<String,Set<Set<PureExp>>> List.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,Set<PureExp> syn_set,String m,PrintWriter o) {
        Map<String,Set<Set<PureExp>>> temp_map = new HashMap<String,Set<Set<PureExp>>>();
        Set<Set<PureExp>> temp_set = new HashSet<Set<PureExp>>();
        temp_set.add(syn_set);
        temp_map.put(m,temp_set);

        if (getNumChild() > 0) {
            temp_map = getChild(0).generate_sync_schema(temp_map,m,o);
            for (int i = 1; i < getNumChild(); i++) {
                temp_map = getChild(1).generate_sync_schema(temp_map,m,o);
            }
        }

        return temp_map;
    }

    public Map<String,Set<Set<PureExp>>> List.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        if (getNumChild() > 0) {
            if(getChild(0) instanceof MethodImpl)
            {
                String name = ((MethodImpl) getChild(0)).getMethodSig().getName();
                syn_map = getChild(0).generate_sync_schema(syn_map,name,o);
            }
            else
            {
                syn_map = getChild(0).generate_sync_schema(syn_map,m,o);
            }
            for (int i = 1; i < getNumChild(); i++) {
                if(getChild(i) instanceof MethodImpl)
                {
                    String name = ((MethodImpl) getChild(i)).getMethodSig().getName();
                    syn_map = getChild(i).generate_sync_schema(syn_map,name,o);
                }
                else
                {
                    syn_map = getChild(i).generate_sync_schema(syn_map,m,o);
                }
            }
        }
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ASTNode.generate_sync_schema(Map<String,Set<Set<PureExp>>> sync_map,String m,PrintWriter o) {
        throw new NotImplementedYetException(this);
    }

    public Map<String,Set<Set<PureExp>>> Model.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        for (ModuleDecl d : getModuleDecls()) {
            syn_map = d.generate_sync_schema(syn_map,m,o);
        }
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ModuleDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        for (Decl decl : getDecls()) {
            syn_map = decl.generate_sync_schema(syn_map,m,o);
        }
        if (hasBlock()) {
            syn_map = getBlock().generate_sync_schema(syn_map,m,o);
        }
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> Block.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        syn_map = getStmtList().generate_sync_schema(syn_map,m,o);
        return syn_map;
    }



    public Map<String,Set<Set<PureExp>>> MainBlock.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        //Set<PureExp> main_sync = new HashSet<PureExp>();
        //PureExp e = (PureExp) "this";
        //main_sync.add(e);
        //Set<Set<PureExp>> temp_set = new HashSet<Set<PureExp>>();
        //temp_set.add(main_sync);
        //syn_map.put("main",{{"main"}});
        syn_map = getStmtList().generate_sync_schema(syn_map,"main",o);
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> AssertStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ThrowStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> DieStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> AssignStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        syn_map = getValue().generate_sync_schema(syn_map,m,o);
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> Call.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m, PrintWriter o) {
        String method = getMethod();
        PureExp callee = getCallee();
        List<PureExp> param = getParamList();
        Set<PureExp> objs = new HashSet<PureExp>();
        objs.add(callee);
        for (PureExp x : param)
            objs.add(x);
        Set<Set<PureExp>> sync_set = syn_map.get(m);
        sync_set = merge_schema(sync_set,objs);
        syn_map.put(m,sync_set);
        return syn_map;
    }

    public Set<Set<PureExp>> Call.merge_schema(Set<Set<PureExp>> sync_set, Set<PureExp> objs){
        if(sync_set.isEmpty())
        {
            Set<Set<PureExp>> temp = new HashSet<Set<PureExp>>();
            temp.add(objs);
            return temp;
        }
        else
        {
            Iterator<Set<PureExp>> i = sync_set.iterator();
            while(i.hasNext())
            {
               Set<PureExp> intersection = new HashSet<PureExp>(i.next());
               intersection.retainAll(objs);
               if(!intersection.isEmpty())
               {
                    Set<PureExp> temp = new HashSet<PureExp>(i.next());
                    sync_set.remove(i.next());
                    temp.addAll(objs);
                    sync_set.add(temp);
                    break;
               }
            }
            return sync_set;
        }
    }

    public Map<String,Set<Set<PureExp>>> GetExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> AddResStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> HoldExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ReleaseResStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> NewExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> OriginalCall.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> AwaitStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> AndGuard.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ClaimGuard.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> DurationGuard.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ExpGuard.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> CostStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ExpressionStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> IfStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        syn_map = getThen().generate_sync_schema(syn_map,m,o);
        if (hasElse()) {
            syn_map = getElse().generate_sync_schema(syn_map,m,o);
        }
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ReturnStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> SkipStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> SuspendStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> VarDeclStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
       return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> VarDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
       return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> WhileStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
       return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ForeachStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> CaseStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> TryCatchFinallyStmt.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    abstract public Map<String,Set<Set<PureExp>>> Export.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o);

    public Map<String,Set<Set<PureExp>>> NamedExport.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> Name.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }
    public Map<String,Set<Set<PureExp>>> StarExport.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> FromExport.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> NamedImport.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }
    public Map<String,Set<Set<PureExp>>> StarImport.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }
    public Map<String,Set<Set<PureExp>>> FromImport.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> TypeSynDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> InterfaceDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> MethodSig.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      String name = null;
      List<ParamDecl> param = getParamList();
      Set<PureExp> objs = new HashSet<PureExp>();
      for (ParamDecl x : param)
      {
        o.print(x.getName());
        o.print(" ");
      }
      o.println();
      //Set<Set<PureExp>> syn_set = new HashSet<Set<PureExp>>();
      //syn_set.add(objs);
      //syn_map = syn_map.put(m,syn_set);
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ClassDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
        List<MethodImpl> methods = getMethodList();
        if (methods.getNumChild() > 0) {
            syn_map = methods.generate_sync_schema(syn_map,m,o);
        }
        return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> FieldDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> MethodImpl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      syn_map = getMethodSig().generate_sync_schema(syn_map,m,o);
      syn_map = getBlock().generate_sync_schema(syn_map,m,o);
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> TypeParameterDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> DataTypeDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> DataTypeUse.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ParametricDataTypeUse.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> TypedAnnotation.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> Annotation.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> TypeParameterUse.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> InterfaceTypeUse.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> FieldUse.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> VarUse.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> Binary.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ConBinary.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> CaseExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ParamDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> IntLiteral.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> StringLiteral.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> FloatLiteral.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ListLiteral.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> NullExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ThisExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> DestinyExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> MinusExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> NegExp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> FunctionDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> PartialFunctionDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> FunctionParamDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> PartialFunctionDef.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> NamedParFnAppParam.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> FnApp.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
              return syn_map;
            }

    public Map<String,Set<Set<PureExp>>> AnonymousFunctionDecl.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }


    public Map<String,Set<Set<PureExp>>> BuiltinFunctionDef.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

    public Map<String,Set<Set<PureExp>>> ExpFunctionDef.generate_sync_schema(Map<String,Set<Set<PureExp>>> syn_map,String m,PrintWriter o) {
      return syn_map;
    }

}


